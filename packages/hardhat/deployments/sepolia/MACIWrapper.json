{
  "address": "0xEc080C88034264EFA39B674B59d60B2f888851E6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "_pollFactory",
          "type": "address"
        },
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "_messageProcessorFactory",
          "type": "address"
        },
        {
          "internalType": "contract ITallyFactory",
          "name": "_tallyFactory",
          "type": "address"
        },
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "_signUpGatekeeper",
          "type": "address"
        },
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "_initialVoiceCreditProxy",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_stateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint256[5]",
          "name": "_emptyBallotRoots",
          "type": "uint256[5]"
        },
        {
          "internalType": "address",
          "name": "_verifierAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DefaultZeroBadIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepthTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPubKey",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NumberOfLeavesCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        }
      ],
      "name": "PollAddressDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "name": "PollDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoseidonHashLibrariesNotLinked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofIsFalse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PubKeyAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManySignups",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coordinatorPubKeyY",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollAddr",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "DeployPoll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollContracts",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "PollTallyCIDUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stateIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyX",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_userPubKeyY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voiceCreditBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "SignUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "VerifyProof",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anonAadhaarVerifierAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_options",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "isQv",
          "type": "uint8"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "enum DomainObjs.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "deployPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "internalType": "struct MACI.PollContracts",
          "name": "pollAddr",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "myArr",
          "type": "uint256[2]"
        }
      ],
      "name": "dumbReturn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emptyBallotRoots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "fetchPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct MACIWrapper.PollData",
          "name": "poll_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ascending",
          "type": "bool"
        }
      ],
      "name": "fetchPolls",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct MACIWrapper.PollData[]",
          "name": "polls_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "getPoll",
      "outputs": [
        {
          "internalType": "address",
          "name": "poll",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        }
      ],
      "name": "getPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStateTreeRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "array",
          "type": "uint256[2]"
        }
      ],
      "name": "hash2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "array",
          "type": "uint256[3]"
        }
      ],
      "name": "hash3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "array",
          "type": "uint256[4]"
        }
      ],
      "name": "hash4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "array",
          "type": "uint256[5]"
        }
      ],
      "name": "hash5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "left",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "right",
          "type": "uint256"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "_message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_encPubKey",
          "type": "tuple"
        }
      ],
      "name": "hashMessageAndEncPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DomainObjs.PubKey",
              "name": "pubKey",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "voiceCreditBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.StateLeaf",
          "name": "_stateLeaf",
          "type": "tuple"
        }
      ],
      "name": "hashStateLeaf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ciphertext",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialVoiceCreditProxy",
      "outputs": [
        {
          "internalType": "contract InitialVoiceCreditProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isPublicKeyRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lazyIMTData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxIndex",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "numberOfLeaves",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSignups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageProcessorFactory",
      "outputs": [
        {
          "internalType": "contract IMessageProcessorFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSignUps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "signUps",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "dataToPad",
          "type": "uint256[2]"
        }
      ],
      "name": "padAndHashMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[10]",
              "name": "data",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DomainObjs.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "padKey",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "msgHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pollFactory",
      "outputs": [
        {
          "internalType": "contract IPollFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pollIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "polls",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "name": "sha256Hash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_pubKey",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signUpGatekeeperData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_initialVoiceCreditProxyData",
          "type": "bytes"
        }
      ],
      "name": "signUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_pubKey",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signUpGatekeeperData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_initialVoiceCreditProxyData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signal",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct MACIWrapper.AnonProof",
          "name": "_anonProof",
          "type": "tuple"
        }
      ],
      "name": "signUpAadhaar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signUpGatekeeper",
      "outputs": [
        {
          "internalType": "contract SignUpGatekeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateTreeDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyFactory",
      "outputs": [
        {
          "internalType": "contract ITallyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeDepths",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "intStateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeSubDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "voteOptionTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "updatePollTallyCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nullifierSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signal",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "revealArray",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[8]",
              "name": "groth16Proof",
              "type": "uint256[8]"
            }
          ],
          "internalType": "struct MACIWrapper.AnonProof",
          "name": "_anonProof",
          "type": "tuple"
        }
      ],
      "name": "verifiedAadhaar",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nullifierSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_signal",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "_revealArray",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[8]",
          "name": "_groth16Proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifiedAadhaar2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vkRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4fc477d63b659d55fac9539e2f096b61f0f1f56cdb36d2c20f9e3024b8949ff",
  "receipt": {
    "to": null,
    "from": "0xB1E9e60aC45128ddcFDAfE9B517800B5fD7D091b",
    "contractAddress": "0xEc080C88034264EFA39B674B59d60B2f888851E6",
    "transactionIndex": 68,
    "gasUsed": "3754485",
    "logsBloom": "0x
    "blockHash": "0xc9d8b8162e062cf773af7f139a6c389d3a2782945ce0eb291845a4d696303970",
    "transactionHash": "0xf4fc477d63b659d55fac9539e2f096b61f0f1f56cdb36d2c20f9e3024b8949ff",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 6477262,
        "transactionHash": "0xf4fc477d63b659d55fac9539e2f096b61f0f1f56cdb36d2c20f9e3024b8949ff",
        "address": "0xEc080C88034264EFA39B674B59d60B2f888851E6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b1e9e60ac45128ddcfdafe9b517800b5fd7d091b"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0xc9d8b8162e062cf773af7f139a6c389d3a2782945ce0eb291845a4d696303970"
      }
    ],
    "blockNumber": 6477262,
    "cumulativeGasUsed": "13393530",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x997ceAD6f5253315468ab1221009BaE22b9aBd5d",
    "0x22B643F658034467176De28BB3692dDaD8B0CB0F",
    "0xE86Cb9c48ef0dE46f013F1455066Cdd9e5c87a53",
    "0x126c4C2577c1456806CAAeca2D48493f286bB3Bf",
    "0x670F0Ee91E0b768596e2ACC3D96a278F0fe38D7E",
    10,
    [
      "16015576667038038422103932363190100635991292382181099511410843174865570503661",
      "166510078825589460025300915201657086611944528317298994959376081297530246971",
      "10057734083972610459557695472359628128485394923403014377687504571662791937025",
      "4904828619307091008204672239231377290495002626534171783829482835985709082773",
      "18694062287284245784028624966421731916526814537891066525886866373016385890569"
    ],
    "0x6bE8Cec7a06BA19c39ef328e8c8940cEfeF7E281"
  ],
  "numDeployments": 1,
  "solcInputHash": "e1a90e3ba1c8372087b1d217a98e0f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"_pollFactory\",\"type\":\"address\"},{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"_messageProcessorFactory\",\"type\":\"address\"},{\"internalType\":\"contract ITallyFactory\",\"name\":\"_tallyFactory\",\"type\":\"address\"},{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"_signUpGatekeeper\",\"type\":\"address\"},{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"_initialVoiceCreditProxy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint256[5]\",\"name\":\"_emptyBallotRoots\",\"type\":\"uint256[5]\"},{\"internalType\":\"address\",\"name\":\"_verifierAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefaultZeroBadIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepthTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPubKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberOfLeavesCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"}],\"name\":\"PollAddressDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"name\":\"PollDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoseidonHashLibrariesNotLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofIsFalse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PubKeyAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManySignups\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coordinatorPubKeyY\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollAddr\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"DeployPoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"name\":\"PollTallyCIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stateIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyX\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_userPubKeyY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voiceCreditBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SignUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"VerifyProof\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anonAadhaarVerifierAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"isQv\",\"type\":\"uint8\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"enum DomainObjs.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deployPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollAddr\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"myArr\",\"type\":\"uint256[2]\"}],\"name\":\"dumbReturn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emptyBallotRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"fetchPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct MACIWrapper.PollData\",\"name\":\"poll_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ascending\",\"type\":\"bool\"}],\"name\":\"fetchPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct MACIWrapper.PollData[]\",\"name\":\"polls_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"getPoll\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"}],\"name\":\"getPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateTreeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"array\",\"type\":\"uint256[2]\"}],\"name\":\"hash2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"array\",\"type\":\"uint256[3]\"}],\"name\":\"hash3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"array\",\"type\":\"uint256[4]\"}],\"name\":\"hash4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"array\",\"type\":\"uint256[5]\"}],\"name\":\"hash5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right\",\"type\":\"uint256\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"_message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_encPubKey\",\"type\":\"tuple\"}],\"name\":\"hashMessageAndEncPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"voiceCreditBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.StateLeaf\",\"name\":\"_stateLeaf\",\"type\":\"tuple\"}],\"name\":\"hashStateLeaf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialVoiceCreditProxy\",\"outputs\":[{\"internalType\":\"contract InitialVoiceCreditProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPublicKeyRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lazyIMTData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxIndex\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"numberOfLeaves\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSignups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageProcessorFactory\",\"outputs\":[{\"internalType\":\"contract IMessageProcessorFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSignUps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"signUps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"dataToPad\",\"type\":\"uint256[2]\"}],\"name\":\"padAndHashMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[10]\",\"name\":\"data\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DomainObjs.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"padKey\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgHash\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pollFactory\",\"outputs\":[{\"internalType\":\"contract IPollFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pollIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"}],\"name\":\"sha256Hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_pubKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signUpGatekeeperData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_initialVoiceCreditProxyData\",\"type\":\"bytes\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_pubKey\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signUpGatekeeperData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_initialVoiceCreditProxyData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct MACIWrapper.AnonProof\",\"name\":\"_anonProof\",\"type\":\"tuple\"}],\"name\":\"signUpAadhaar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUpGatekeeper\",\"outputs\":[{\"internalType\":\"contract SignUpGatekeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyFactory\",\"outputs\":[{\"internalType\":\"contract ITallyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeDepths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tallyJsonCID\",\"type\":\"string\"}],\"name\":\"updatePollTallyCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"groth16Proof\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct MACIWrapper.AnonProof\",\"name\":\"_anonProof\",\"type\":\"tuple\"}],\"name\":\"verifiedAadhaar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nullifierSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_revealArray\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"_groth16Proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifiedAadhaar2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vkRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"How long should the Poll last for\",\"_mode\":\"Voting mode\",\"_treeDepths\":\"The depth of the Merkle trees\",\"_verifier\":\"The Verifier Contract\",\"_vkRegistry\":\"The VkRegistry Contract\"},\"returns\":{\"pollAddr\":\"a new Poll contract address\"}},\"getPoll(uint256)\":{\"params\":{\"_pollId\":\"The identifier of the Poll to retrieve\"},\"returns\":{\"poll\":\"The Poll contract object\"}},\"getStateTreeRoot()\":{\"returns\":{\"root\":\"The Merkle root\"}},\"hash2(uint256[2])\":{\"params\":{\"array\":\"An array of two uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hash3(uint256[3])\":{\"params\":{\"array\":\"An array of three uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the three elements.\"}},\"hash4(uint256[4])\":{\"params\":{\"array\":\"An array of four uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the four elements.\"}},\"hash5(uint256[5])\":{\"params\":{\"array\":\"An array of five uint256 elements.\"},\"returns\":{\"result\":\"The Poseidon hash of the five elements.\"}},\"hashLeftRight(uint256,uint256)\":{\"params\":{\"left\":\"the first element to hash.\",\"right\":\"the second element to hash.\"},\"returns\":{\"result\":\"The Poseidon hash of the two elements.\"}},\"hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))\":{\"params\":{\"_encPubKey\":\"the encryption public key to be hashed\",\"_message\":\"the message to be hashed\"},\"returns\":{\"msgHash\":\"The hash of the message and the encryption public key\"}},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"params\":{\"_stateLeaf\":\"the state leaf to be hashed\"},\"returns\":{\"ciphertext\":\"The hash of the state leaf\"}},\"numSignUps()\":{\"returns\":{\"signUps\":\"numsignUps The number of signups\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"padAndHashMessage(uint256[2])\":{\"params\":{\"dataToPad\":\"the data to be padded\"},\"returns\":{\"message\":\"The padded message\",\"msgHash\":\"The hash of the padded message and encryption key\",\"padKey\":\"The padding public key\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sha256Hash(uint256[])\":{\"params\":{\"array\":\"The array of uint256 elements.\"},\"returns\":{\"result\":\"The SHA256 hash of the array.\"}},\"signUp((uint256,uint256),bytes,bytes)\":{\"params\":{\"_initialVoiceCreditProxyData\":\"Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.\",\"_pubKey\":\"The user's desired public key.\",\"_signUpGatekeeperData\":\"Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MACI - Minimum Anti-Collusion Infrastructure Version 1\",\"version\":1},\"userdoc\":{\"errors\":{\"DefaultZeroBadIndex()\":[{\"notice\":\"Custom errors\"}],\"InvalidMessage()\":[{\"notice\":\"custom errors\"}],\"PoseidonHashLibrariesNotLinked()\":[{\"notice\":\"custom errors\"}]},\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"createPoll(string,string[],string,uint256,uint8)\":{\"notice\":\"Ends of AnonAadhaar integration \"},\"deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)\":{\"notice\":\"Deploy a new Poll contract.\"},\"emptyBallotRoots(uint256)\":{\"notice\":\"The roots of the empty ballot trees\"},\"getPoll(uint256)\":{\"notice\":\"Get the Poll details\"},\"getStateTreeRoot()\":{\"notice\":\"Return the main root of the StateAq contract\"},\"hash2(uint256[2])\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hash3(uint256[3])\":{\"notice\":\"Computes the Poseidon hash of three uint256 elements.\"},\"hash4(uint256[4])\":{\"notice\":\"Computes the Poseidon hash of four uint256 elements.\"},\"hash5(uint256[5])\":{\"notice\":\"Computes the Poseidon hash of five uint256 elements.\"},\"hashLeftRight(uint256,uint256)\":{\"notice\":\"Computes the Poseidon hash of two uint256 elements.\"},\"hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))\":{\"notice\":\"An utility function used to hash a MACI message and an encryption public key\"},\"hashStateLeaf(((uint256,uint256),uint256,uint256))\":{\"notice\":\"An utility function used to hash a state leaf\"},\"initialVoiceCreditProxy()\":{\"notice\":\"The contract which provides the values of the initial voice credit balance per user\"},\"lazyIMTData()\":{\"notice\":\"The state tree. Represents a mapping between each user's public key and their voice credit balance.\"},\"messageProcessorFactory()\":{\"notice\":\"Factory contract that deploy a MessageProcessor contract\"},\"nextPollId()\":{\"notice\":\"Each poll has an incrementing ID\"},\"numSignUps()\":{\"notice\":\"Get the number of signups\"},\"padAndHashMessage(uint256[2])\":{\"notice\":\"An utility function used to pad and hash a MACI message\"},\"pollFactory()\":{\"notice\":\"Factory contract that deploy a Poll contract\"},\"polls(uint256)\":{\"notice\":\"A mapping of poll IDs to Poll contracts.\"},\"sha256Hash(uint256[])\":{\"notice\":\"Computes the SHA256 hash of an array of uint256 elements.\"},\"signUp((uint256,uint256),bytes,bytes)\":{\"notice\":\"Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue.\"},\"signUpGatekeeper()\":{\"notice\":\"Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote\"},\"stateTreeDepth()\":{\"notice\":\"The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608 this should also match the parameter of the circom circuits.IMPORTANT: remember to change the ballot tree depth in contracts/ts/genEmptyBallotRootsContract.ts file if we change the state tree depth!\"},\"tallyFactory()\":{\"notice\":\"Factory contract that deploy a Tally contract\"},\"verifiedAadhaar((uint256,uint256,uint256,uint256,uint256[4],uint256[8]))\":{\"notice\":\"Begining of AnonAadhaar integration \"}},\"notice\":\"A contract which allows users to sign up, and deploy new polls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/MACIWrapper.sol\":\"MACIWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IAnonAadhaar {\\n    function verifyAnonAadhaarProof(\\n        uint nullifierSeed,\\n        uint nullifier,\\n        uint timestamp,\\n        uint signal,\\n        uint[4] memory revealArray,\\n        uint[8] memory groth16Proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3d0247e04707d2266471efeef4ab38ecf879cc286217ad5f624d966608e8964d\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/maci-contracts/MACIWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { MACI } from \\\"maci-contracts/contracts/MACI.sol\\\";\\nimport { IPollFactory } from \\\"maci-contracts/contracts/interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"maci-contracts/contracts/interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"maci-contracts/contracts/interfaces/ITallyFactory.sol\\\";\\nimport { SignUpGatekeeper } from \\\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\nimport '@anon-aadhaar/contracts/interfaces/IAnonAadhaar.sol';\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACIWrapper is MACI, Ownable(msg.sender) {\\n\\tstruct PollData {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tbytes encodedOptions;\\n\\t\\tstring metadata;\\n\\t\\tMACIWrapper.PollContracts pollContracts;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 endTime;\\n\\t\\tuint256 numOfOptions;\\n\\t\\tstring[] options;\\n\\t\\tstring tallyJsonCID;\\n\\t}\\n\\n\\n\\t/**Begining of AnonAadhaar integration */\\n\\tstruct AnonProof{\\n\\t\\tuint nullifierSeed;\\n        uint nullifier;\\n        uint timestamp;\\n        uint signal;\\n        uint[4] revealArray;\\n        uint[8] groth16Proof;\\n\\t}\\n\\n    address public anonAadhaarVerifierAddr;\\n\\n\\t// IAnonAadhaar public AnonAadhaar = IAnonAadhaar(0x6bE8Cec7a06BA19c39ef328e8c8940cEfeF7E281); //hardcoded sepolia verifier for maximum hacking experience ;)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t   \\n\\n\\terror ProofIsFalse();\\n\\tevent VerifyProof(address indexed caller, address indexed verifier, bool indexed verified);\\n\\t/**End of AnonAadhaar integration */\\n\\tmapping(uint256 => PollData) internal _polls;\\n\\n\\tTreeDepths public treeDepths;\\n\\tPubKey public coordinatorPubKey;\\n\\taddress public verifier;\\n\\taddress public vkRegistry;\\n\\n\\tmapping(address => uint256) public pollIds;\\n\\n\\tevent PollCreated(\\n\\t\\tuint256 indexed pollId,\\n\\t\\taddress indexed creator,\\n\\t\\tMACIWrapper.PollContracts pollContracts,\\n\\t\\tstring name,\\n\\t\\tstring[] options,\\n\\t\\tstring metadata,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 endTime\\n\\t);\\n\\n\\tevent PollTallyCIDUpdated(uint256 indexed pollId, string tallyJsonCID);\\n\\n\\t// pubkey.x => pubkey.y => bool\\n\\tmapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered;\\n\\n\\terror PubKeyAlreadyRegistered();\\n\\terror PollAddressDoesNotExist(address _poll);\\n\\n\\tconstructor(\\n\\t\\tIPollFactory _pollFactory,\\n\\t\\tIMessageProcessorFactory _messageProcessorFactory,\\n\\t\\tITallyFactory _tallyFactory,\\n\\t\\tSignUpGatekeeper _signUpGatekeeper,\\n\\t\\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\\n\\t\\tuint8 _stateTreeDepth,\\n\\t    uint256[5] memory _emptyBallotRoots,\\n        address _verifierAddr\\n\\t)\\n\\t\\tMACI(\\n\\t\\t\\t_pollFactory,\\n\\t\\t\\t_messageProcessorFactory,\\n\\t\\t\\t_tallyFactory,\\n\\t\\t\\t_signUpGatekeeper,\\n\\t\\t\\t_initialVoiceCreditProxy,\\n\\t\\t\\t_stateTreeDepth,\\n\\t\\t\\t_emptyBallotRoots\\n\\t\\t)\\n\\t{\\n        anonAadhaarVerifierAddr = _verifierAddr;\\n\\t}\\n\\n\\tfunction setConfig(\\n\\t\\tTreeDepths memory _treeDepths,\\n\\t\\tPubKey memory _coordinatorPubKey,\\n\\t\\taddress _verifier,\\n\\t\\taddress _vkRegistry\\n\\t) public onlyOwner {\\n\\t\\ttreeDepths = _treeDepths;\\n\\t\\tcoordinatorPubKey = _coordinatorPubKey;\\n\\t\\tverifier = _verifier;\\n\\t\\tvkRegistry = _vkRegistry;\\n\\t}\\n\\n\\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n\\t/// double sign-ups or ineligible users from doing so.  This function will\\n\\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\\n\\t/// fresh state leaf into the state AccQueue.\\n\\t/// @param _pubKey The user's desired public key.\\n\\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n\\t///     register() function. For instance, the POAPGatekeeper or\\n\\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n\\t///     token ID.\\n\\t/// @param _initialVoiceCreditProxyData Data to pass to the\\n\\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n\\t///     credits this user should have.\\n\\tfunction signUp(\\n\\t\\tPubKey memory _pubKey,\\n\\t\\tbytes memory _signUpGatekeeperData,\\n\\t\\tbytes memory _initialVoiceCreditProxyData\\n\\t) public override {\\n\\t\\t// check if the pubkey is already registered\\n\\t\\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\\n\\t\\t\\trevert PubKeyAlreadyRegistered();\\n\\n\\t\\tsuper.signUp(\\n\\t\\t\\t_pubKey,\\n\\t\\t\\t_signUpGatekeeperData,\\n\\t\\t\\t_initialVoiceCreditProxyData\\n\\t\\t);\\n\\n\\t\\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\\n\\t}\\n\\n\\t/**Begining of AnonAadhaar integration */\\n\\tfunction verifiedAadhaar(AnonProof memory _anonProof) public view returns (bool) {\\n\\t\\tbool verified = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\n\\t\\t\\t_anonProof.nullifierSeed,\\n\\t\\t\\t_anonProof.nullifier,\\n\\t\\t\\t_anonProof.timestamp, \\n\\t\\t\\t_anonProof.signal, \\n\\t\\t\\t_anonProof.revealArray,\\n\\t\\t\\t_anonProof.groth16Proof\\n\\t\\t);\\n\\t\\t\\n\\t\\treturn verified;\\n\\t}\\n\\n    function verifiedAadhaar2(\\n\\t\\t\\t\\t\\t\\t\\tuint _nullifierSeed, \\n\\t\\t\\t\\t\\t\\t\\tuint _nullifier, \\n\\t\\t\\t\\t\\t\\t\\tuint _timestamp, \\n\\t\\t\\t\\t\\t\\t\\tuint _signal, \\n\\t\\t\\t\\t\\t\\t\\tuint[4] memory _revealArray, \\n\\t\\t\\t\\t\\t\\t\\tuint[8] memory _groth16Proof\\n\\t\\t\\t\\t\\t\\t\\t) public view returns (bool) {\\n\\t\\tbool verified = IAnonAadhaar(anonAadhaarVerifierAddr).verifyAnonAadhaarProof(\\n                _nullifierSeed, // nulifier seed\\n                _nullifier,\\n                _timestamp,\\n                _signal,\\n                _revealArray,\\n                _groth16Proof\\n            );\\n\\t\\t\\n\\t\\treturn verified;\\n\\t}\\n\\n\\tfunction signUpAadhaar(\\n\\t\\tPubKey memory _pubKey,\\n\\t\\tbytes memory _signUpGatekeeperData,\\n\\t\\tbytes memory _initialVoiceCreditProxyData,\\n\\t\\tAnonProof memory _anonProof\\n\\t) public {\\n\\n\\t\\t// check if user has an anonAadhaar proof\\t\\n\\t\\tif (!verifiedAadhaar(_anonProof)) revert ProofIsFalse();\\n\\n\\t\\t// check if the pubkey is already registered\\n\\t\\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y]) revert PubKeyAlreadyRegistered();\\n\\n\\t\\tsuper.signUp(\\n\\t\\t\\t_pubKey,\\n\\t\\t\\t_signUpGatekeeperData,\\n\\t\\t\\t_initialVoiceCreditProxyData\\n\\t\\t);\\n\\n\\t\\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\\n\\t}\\t\\n\\n\\tfunction dumbReturn (uint[2] memory myArr) public pure returns (bool){\\n\\t\\tif (myArr[0] == 1 && myArr[1] == 3) {\\n        return true;\\n    }\\n    return false;\\n\\t}\\n\\t/**Ends of AnonAadhaar integration */\\n\\tfunction createPoll(\\n\\t\\tstring calldata _name,\\n\\t\\tstring[] calldata _options,\\n\\t\\tstring calldata _metadata,\\n\\t\\tuint256 _duration,\\n\\t\\tMode isQv\\n\\t) public onlyOwner {\\n\\t\\t// TODO: check if the number of options are more than limit\\n\\n\\t\\tuint256 pollId = nextPollId;\\n\\n\\t\\tPollContracts memory pollContracts = deployPoll(\\n\\t\\t\\t_duration,\\n\\t\\t\\ttreeDepths,\\n\\t\\t\\tcoordinatorPubKey,\\n\\t\\t\\tverifier,\\n\\t\\t\\tvkRegistry,\\n\\t\\t\\tisQv\\n\\t\\t);\\n\\n\\t\\tpollIds[pollContracts.poll] = pollId;\\n\\n\\t\\t// encode options to bytes for retrieval\\n\\t\\tbytes memory encodedOptions = abi.encode(_options);\\n\\n\\t\\tuint256 endTime = block.timestamp + _duration;\\n\\n\\t\\t// create poll\\n\\t\\t_polls[pollId] = PollData({\\n\\t\\t\\tid: pollId,\\n\\t\\t\\tname: _name,\\n\\t\\t\\tencodedOptions: encodedOptions,\\n\\t\\t\\tnumOfOptions: _options.length,\\n\\t\\t\\tmetadata: _metadata,\\n\\t\\t\\tstartTime: block.timestamp,\\n\\t\\t\\tendTime: endTime,\\n\\t\\t\\tpollContracts: pollContracts,\\n\\t\\t\\toptions: _options,\\n\\t\\t\\ttallyJsonCID: \\\"\\\"\\n\\t\\t});\\n\\n\\t\\temit PollCreated(\\n\\t\\t\\tpollId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tpollContracts,\\n\\t\\t\\t_name,\\n\\t\\t\\t_options,\\n\\t\\t\\t_metadata,\\n\\t\\t\\tblock.timestamp,\\n\\t\\t\\tendTime\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getPollId(address _poll) public view returns (uint256 pollId) {\\n\\t\\tif (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\\n\\t\\tpollId = pollIds[_poll];\\n\\t}\\n\\n\\tfunction updatePollTallyCID(\\n\\t\\tuint256 _pollId,\\n\\t\\tstring calldata _tallyJsonCID\\n\\t) public onlyOwner {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\tPollData storage poll = _polls[_pollId];\\n\\t\\tpoll.tallyJsonCID = _tallyJsonCID;\\n\\n\\t\\temit PollTallyCIDUpdated(_pollId, _tallyJsonCID);\\n\\t}\\n\\n\\tfunction fetchPolls(\\n\\t\\tuint256 _page,\\n\\t\\tuint256 _perPage,\\n\\t\\tbool _ascending\\n\\t) public view returns (PollData[] memory polls_) {\\n\\t\\tuint256 start = (_page - 1) * _perPage;\\n\\t\\tuint256 end = start + _perPage - 1;\\n\\n\\t\\tif (start >= nextPollId) {\\n\\t\\t\\treturn new PollData[](0);\\n\\t\\t}\\n\\n\\t\\tif (end >= nextPollId) {\\n\\t\\t\\tend = nextPollId - 1;\\n\\t\\t}\\n\\n\\t\\tpolls_ = new PollData[](end - start + 1);\\n\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint256 i = start; i <= end; i++) {\\n\\t\\t\\tuint256 pollIndex = i;\\n\\t\\t\\tif (!_ascending) {\\n\\t\\t\\t\\tpollIndex = nextPollId - i - 1;\\n\\t\\t\\t}\\n\\t\\t\\tpolls_[index++] = _polls[pollIndex];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fetchPoll(\\n\\t\\tuint256 _pollId\\n\\t) public view returns (PollData memory poll_) {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\treturn _polls[_pollId];\\n\\t}\\n}\\n\",\"keccak256\":\"0xaab0e2139792bbdae14b81fa054cadc23874b62d50c98addfbb147f1251b953f\",\"license\":\"MIT\"},\"maci-contracts/contracts/MACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"./interfaces/ITallyFactory.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\nimport { SignUpGatekeeper } from \\\"./gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { CurveBabyJubJub } from \\\"./crypto/BabyJubJub.sol\\\";\\nimport { InternalLazyIMT, LazyIMTData } from \\\"./trees/LazyIMT.sol\\\";\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACI is IMACI, DomainObjs, Params, Utilities {\\n  /// @notice The state tree depth is fixed. As such it should be as large as feasible\\n  /// so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608\\n  /// this should also match the parameter of the circom circuits.\\n  /// @notice IMPORTANT: remember to change the ballot tree depth\\n  /// in contracts/ts/genEmptyBallotRootsContract.ts file\\n  /// if we change the state tree depth!\\n  uint8 public immutable stateTreeDepth;\\n\\n  uint256 public immutable maxSignups;\\n\\n  uint8 internal constant TREE_ARITY = 2;\\n  uint8 internal constant MESSAGE_TREE_ARITY = 5;\\n\\n  /// @notice The hash of a blank state leaf\\n  uint256 internal constant BLANK_STATE_LEAF_HASH =\\n    uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\\n\\n  /// @notice The roots of the empty ballot trees\\n  uint256[5] public emptyBallotRoots;\\n\\n  /// @notice Each poll has an incrementing ID\\n  uint256 public nextPollId;\\n\\n  /// @notice A mapping of poll IDs to Poll contracts.\\n  mapping(uint256 => address) public polls;\\n\\n  /// @notice Factory contract that deploy a Poll contract\\n  IPollFactory public immutable pollFactory;\\n\\n  /// @notice Factory contract that deploy a MessageProcessor contract\\n  IMessageProcessorFactory public immutable messageProcessorFactory;\\n\\n  /// @notice Factory contract that deploy a Tally contract\\n  ITallyFactory public immutable tallyFactory;\\n\\n  /// @notice The state tree. Represents a mapping between each user's public key\\n  /// and their voice credit balance.\\n  LazyIMTData public lazyIMTData;\\n\\n  /// @notice Address of the SignUpGatekeeper, a contract which determines whether a\\n  /// user may sign up to vote\\n  SignUpGatekeeper public immutable signUpGatekeeper;\\n\\n  /// @notice The contract which provides the values of the initial voice credit\\n  /// balance per user\\n  InitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\\n\\n  /// @notice A struct holding the addresses of poll, mp and tally\\n  struct PollContracts {\\n    address poll;\\n    address messageProcessor;\\n    address tally;\\n  }\\n\\n  // Events\\n  event SignUp(\\n    uint256 _stateIndex,\\n    uint256 indexed _userPubKeyX,\\n    uint256 indexed _userPubKeyY,\\n    uint256 _voiceCreditBalance,\\n    uint256 _timestamp\\n  );\\n  event DeployPoll(\\n    uint256 _pollId,\\n    uint256 indexed _coordinatorPubKeyX,\\n    uint256 indexed _coordinatorPubKeyY,\\n    PollContracts pollAddr,\\n    Mode _mode\\n  );\\n\\n  /// @notice custom errors\\n  error PoseidonHashLibrariesNotLinked();\\n  error TooManySignups();\\n  error InvalidPubKey();\\n  error PollDoesNotExist(uint256 pollId);\\n\\n  /// @notice Create a new instance of the MACI contract.\\n  /// @param _pollFactory The PollFactory contract\\n  /// @param _messageProcessorFactory The MessageProcessorFactory contract\\n  /// @param _tallyFactory The TallyFactory contract\\n  /// @param _signUpGatekeeper The SignUpGatekeeper contract\\n  /// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\\n  /// @param _stateTreeDepth The depth of the state tree\\n  /// @param _emptyBallotRoots The roots of the empty ballot trees\\n  constructor(\\n    IPollFactory _pollFactory,\\n    IMessageProcessorFactory _messageProcessorFactory,\\n    ITallyFactory _tallyFactory,\\n    SignUpGatekeeper _signUpGatekeeper,\\n    InitialVoiceCreditProxy _initialVoiceCreditProxy,\\n    uint8 _stateTreeDepth,\\n    uint256[5] memory _emptyBallotRoots\\n  ) payable {\\n    // initialize and insert the blank leaf\\n    InternalLazyIMT._init(lazyIMTData, _stateTreeDepth);\\n    InternalLazyIMT._insert(lazyIMTData, BLANK_STATE_LEAF_HASH);\\n\\n    pollFactory = _pollFactory;\\n    messageProcessorFactory = _messageProcessorFactory;\\n    tallyFactory = _tallyFactory;\\n    signUpGatekeeper = _signUpGatekeeper;\\n    initialVoiceCreditProxy = _initialVoiceCreditProxy;\\n    stateTreeDepth = _stateTreeDepth;\\n    maxSignups = uint256(TREE_ARITY) ** uint256(_stateTreeDepth);\\n    emptyBallotRoots = _emptyBallotRoots;\\n\\n    // Verify linked poseidon libraries\\n    if (hash2([uint256(1), uint256(1)]) == 0) revert PoseidonHashLibrariesNotLinked();\\n  }\\n\\n  /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n  /// double sign-ups or ineligible users from doing so.  This function will\\n  /// only succeed if the sign-up deadline has not passed. It also enqueues a\\n  /// fresh state leaf into the state AccQueue.\\n  /// @param _pubKey The user's desired public key.\\n  /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n  ///     register() function. For instance, the POAPGatekeeper or\\n  ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n  ///     token ID.\\n  /// @param _initialVoiceCreditProxyData Data to pass to the\\n  ///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n  ///     credits this user should have.\\n  function signUp(\\n    PubKey memory _pubKey,\\n    bytes memory _signUpGatekeeperData,\\n    bytes memory _initialVoiceCreditProxyData\\n  ) public virtual {\\n    // ensure we do not have more signups than what the circuits support\\n    if (lazyIMTData.numberOfLeaves >= maxSignups) revert TooManySignups();\\n\\n    // ensure that the public key is on the baby jubjub curve\\n    if (!CurveBabyJubJub.isOnCurve(_pubKey.x, _pubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    // Register the user via the sign-up gatekeeper. This function should\\n    // throw if the user has already registered or if ineligible to do so.\\n    signUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\\n\\n    // Get the user's voice credit balance.\\n    uint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(msg.sender, _initialVoiceCreditProxyData);\\n\\n    uint256 timestamp = block.timestamp;\\n\\n    // Create a state leaf and insert it into the tree.\\n    uint256 stateLeaf = hashStateLeaf(StateLeaf(_pubKey, voiceCreditBalance, timestamp));\\n    InternalLazyIMT._insert(lazyIMTData, stateLeaf);\\n\\n    emit SignUp(lazyIMTData.numberOfLeaves - 1, _pubKey.x, _pubKey.y, voiceCreditBalance, timestamp);\\n  }\\n\\n  /// @notice Deploy a new Poll contract.\\n  /// @param _duration How long should the Poll last for\\n  /// @param _treeDepths The depth of the Merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _verifier The Verifier Contract\\n  /// @param _vkRegistry The VkRegistry Contract\\n  /// @param _mode Voting mode\\n  /// @return pollAddr a new Poll contract address\\n  function deployPoll(\\n    uint256 _duration,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    address _verifier,\\n    address _vkRegistry,\\n    Mode _mode\\n  ) public virtual returns (PollContracts memory pollAddr) {\\n    // cache the poll to a local variable so we can increment it\\n    uint256 pollId = nextPollId;\\n\\n    // Increment the poll ID for the next poll\\n    // 2 ** 256 polls available\\n    unchecked {\\n      nextPollId++;\\n    }\\n\\n    // check coordinator key is a valid point on the curve\\n    if (!CurveBabyJubJub.isOnCurve(_coordinatorPubKey.x, _coordinatorPubKey.y)) {\\n      revert InvalidPubKey();\\n    }\\n\\n    uint256 voteOptionTreeDepth = _treeDepths.voteOptionTreeDepth;\\n\\n    MaxValues memory maxValues = MaxValues({\\n      maxMessages: uint256(MESSAGE_TREE_ARITY) ** _treeDepths.messageTreeDepth,\\n      maxVoteOptions: uint256(MESSAGE_TREE_ARITY) ** voteOptionTreeDepth\\n    });\\n\\n    address p = pollFactory.deploy(\\n      _duration,\\n      maxValues,\\n      _treeDepths,\\n      _coordinatorPubKey,\\n      address(this),\\n      emptyBallotRoots[voteOptionTreeDepth - 1]\\n    );\\n\\n    address mp = messageProcessorFactory.deploy(_verifier, _vkRegistry, p, msg.sender, _mode);\\n    address tally = tallyFactory.deploy(_verifier, _vkRegistry, p, mp, msg.sender, _mode);\\n\\n    polls[pollId] = p;\\n\\n    // store the addresses in a struct so they can be returned\\n    pollAddr = PollContracts({ poll: p, messageProcessor: mp, tally: tally });\\n\\n    emit DeployPoll(pollId, _coordinatorPubKey.x, _coordinatorPubKey.y, pollAddr, _mode);\\n  }\\n\\n  /// @inheritdoc IMACI\\n  function getStateTreeRoot() public view returns (uint256 root) {\\n    root = InternalLazyIMT._root(lazyIMTData);\\n  }\\n\\n  /// @notice Get the Poll details\\n  /// @param _pollId The identifier of the Poll to retrieve\\n  /// @return poll The Poll contract object\\n  function getPoll(uint256 _pollId) public view returns (address poll) {\\n    if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n    poll = polls[_pollId];\\n  }\\n\\n  /// @inheritdoc IMACI\\n  function numSignUps() public view returns (uint256 signUps) {\\n    signUps = lazyIMTData.numberOfLeaves;\\n  }\\n}\\n\",\"keccak256\":\"0xb855d72ba7c9b54a5715e1f0d80841117bf5d67ea031a76d904ec23e1011b6bf\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/BabyJubJub.sol\":{\"content\":\"// @note This code was taken from\\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\\n// Thanks to yondonfu for the code\\n// Implementation cited on baby-jubjub's paper\\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary CurveBabyJubJub {\\n  // Curve parameters\\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\\n  // A = 168700\\n  uint256 public constant A = 0x292FC;\\n  // D = 168696\\n  uint256 public constant D = 0x292F8;\\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\\n\\n  /**\\n   * @dev Add 2 points on baby jubjub curve\\n   * Formula for adding 2 points on a twisted Edwards curve:\\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\\n   */\\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\\n    if (_x1 == 0 && _y1 == 0) {\\n      return (_x2, _y2);\\n    }\\n\\n    if (_x2 == 0 && _y1 == 0) {\\n      return (_x1, _y1);\\n    }\\n\\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\\n\\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\\n  }\\n\\n  /**\\n   * @dev Double a point on baby jubjub curve\\n   * Doubling can be performed with the same formula as addition\\n   */\\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\\n    return pointAdd(_x1, _y1, _x1, _y1);\\n  }\\n\\n  /**\\n   * @dev Multiply a point on baby jubjub curve by a scalar\\n   * Use the double and add algorithm\\n   */\\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\\n    uint256 remaining = _d;\\n\\n    uint256 px = _x1;\\n    uint256 py = _y1;\\n    uint256 ax = 0;\\n    uint256 ay = 0;\\n\\n    while (remaining != 0) {\\n      if ((remaining & 1) != 0) {\\n        // Binary digit is 1 so add\\n        (ax, ay) = pointAdd(ax, ay, px, py);\\n      }\\n\\n      (px, py) = pointDouble(px, py);\\n\\n      remaining = remaining / 2;\\n    }\\n\\n    x2 = ax;\\n    y2 = ay;\\n  }\\n\\n  /**\\n   * @dev Check if a given point is on the curve\\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\\n   */\\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\\n    uint256 xSq = mulmod(_x, _x, Q);\\n    uint256 ySq = mulmod(_y, _y, Q);\\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\\n    return submod(lhs, rhs, Q) == 0;\\n  }\\n\\n  /**\\n   * @dev Perform modular subtraction\\n   */\\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\\n    uint256 aNN = _a;\\n\\n    if (_a <= _b) {\\n      aNN += _mod;\\n    }\\n\\n    return addmod(aNN - _b, 0, _mod);\\n  }\\n\\n  /**\\n   * @dev Compute modular inverse of a number\\n   */\\n  function inverse(uint256 _a) internal view returns (uint256) {\\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\\n    return expmod(_a, Q - 2, Q);\\n  }\\n\\n  /**\\n   * @dev Helper function to call the bigModExp precompile\\n   */\\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\\n    assembly {\\n      let memPtr := mload(0x40)\\n      mstore(memPtr, 0x20) // Length of base _b\\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\\n      mstore(add(memPtr, 0x60), _b) // Base _b\\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\\n\\n      // The bigModExp precompile is at 0x05\\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\\n      switch success\\n      case 0 {\\n        revert(0x0, 0x0)\\n      }\\n      default {\\n        o := mload(memPtr)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf28f6c9c4534cecd69276c7f902a33ed94a08901400f570979085701d796cea8\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x5bd9dc3c43c862d8fd566e8ae2d3a52e1271f2aa3b042c71f97fe2dc449b1d5f\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x27b66b331502146590287b856ab767b2a2fb66a16da114961e3cef9e160d7263\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xd38b24182625dab43ccd72c623df1263f2fec8ef828852189bf8ac17e59ae12b\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x93228facf0feb920e3b92e536040ba3c6fd5ffcdd5ae415373f153e05cec78b9\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x792080273729327555e4bed7ba86e51a22e63769732308ac0a59dce88e451505\",\"license\":\"MIT\"},\"maci-contracts/contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xef88737ff3d47333964f4fd6b939a12fe6e2ca64b069b26600a10c6a8f52fc7b\",\"license\":\"MIT\"},\"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n\\n  /// @notice Get the trait of the gatekeeper\\n  /// @return The type of the gatekeeper\\n  function getTrait() public pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x81eee8829ae3deeae2c4870c4ba6776e7512a08cfe52d7bb26a84fea6c193881\",\"license\":\"MIT\"},\"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title InitialVoiceCreditProxy\\n/// @notice This contract is the base contract for\\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\\n/// credit balance for MACI's voters.\\nabstract contract InitialVoiceCreditProxy {\\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\\n  /// @param _user the address of the voter\\n  /// @param _data additional data\\n  /// @return the balance\\n  // solhint-disable-next-line no-empty-blocks\\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa25c307be878c23d3e2f02200eb5cb1ad7c26efc3356cfdc5e72b1e2008f1249\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateTreeRoot() external view returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ab057b23782dae9e0b399bdb262adbe32be85fa8db17f0a0fbfca56352603c1\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xe26a5a2bc189117c9d7e7a60f248c3fcec64b81144bd164633ab971248cf43ce\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _emptyBallotRoot The root of the empty ballot tree\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    uint256 _emptyBallotRoot\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xe55282807e017802e2cbb4231ca0939472d313d340aba15d158029ec51eac9ff\",\"license\":\"MIT\"},\"maci-contracts/contracts/interfaces/ITallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title ITallyFactory\\n/// @notice TallyFactory interface\\ninterface ITallyFactory {\\n  /// @notice Deploy a new Tally contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @param _mode Voting mode\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    DomainObjs.Mode _mode\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x941442404bf8dc477bb99516c25ac2b46f27a8d32707d4a72fc3bb77e39f7362\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable(msg.sender), Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xf7b3357a612808b59e27300842bd92fefc42e276348fc2f4bf794192e2499de8\",\"license\":\"MIT\"},\"maci-contracts/contracts/trees/LazyIMT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { PoseidonT3 } from \\\"../crypto/PoseidonT3.sol\\\";\\n\\n/// @notice A struct that holds a LazyIMT data\\nstruct LazyIMTData {\\n  uint40 maxIndex;\\n  uint40 numberOfLeaves;\\n  mapping(uint256 => uint256) elements;\\n}\\n\\n/// @notice Custom errors\\nerror DefaultZeroBadIndex();\\nerror DepthTooLarge();\\nerror DepthCannotBeZero();\\nerror NumberOfLeavesCannotBeZero();\\nerror AmbiguousDepth();\\n\\n/// @title InternalLazyIMT\\n/// @dev A LazyIMT with Zeroes value set to the hash of\\n/// a MACI Blank State Leaf\\n/// @notice This implementation is taken from zk-kit\\n/// https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/imt.sol/contracts/internal/InternalLazyIMT.sol\\n/// and modified to work with MACI.\\nlibrary InternalLazyIMT {\\n  uint256 internal constant MAX_DEPTH = 32;\\n\\n  uint40 internal constant MAX_INDEX = (1 << 32) - 1;\\n\\n  uint256 internal constant Z_0 = 6769006970205099520508948723718471724660867171122235270773600567925038008762;\\n  uint256 internal constant Z_1 = 2972820301952105722688860985556183033855705951263221082702981787813754939537;\\n  uint256 internal constant Z_2 = 19009473369953096352828532459942637819279786575057870804186038131433538383332;\\n  uint256 internal constant Z_3 = 1877001762518233819645599208989578372605193385355680834239714249281096297174;\\n  uint256 internal constant Z_4 = 4022598852800694816938652741439614774645858989706174527409714109784047480520;\\n  uint256 internal constant Z_5 = 8078617093048295855521451309865989496051030103472138252021705658681696298712;\\n  uint256 internal constant Z_6 = 21861637049723057871988413507302821095913894718242489848472531680353400271584;\\n  uint256 internal constant Z_7 = 2969626195902860050407584814596940245443093107470116547781577350415736914038;\\n  uint256 internal constant Z_8 = 13863086449569754493134198846069090996475357615094865751949144794620598051673;\\n  uint256 internal constant Z_9 = 13774233155966252113965527228795435224641075024674384267997743867571011718458;\\n  uint256 internal constant Z_10 = 7674682532432601125535053858292577379388329393276537570517515727197672122157;\\n  uint256 internal constant Z_11 = 2657471847139856346360223652201172662911313292042510535836997980857168085414;\\n  uint256 internal constant Z_12 = 14112562742724116016492623819773686970029672095023612838615540190985426106768;\\n  uint256 internal constant Z_13 = 16966520284141749853106006448832965932249937855809150844697400390499975107456;\\n  uint256 internal constant Z_14 = 21146121663662200258116396149536742745305242191891337170899444969488030502620;\\n  uint256 internal constant Z_15 = 8395571901509192935479743034608666551563743095742598750914087478677907730358;\\n  uint256 internal constant Z_16 = 11584898446168752024843587018551921614604785083342073076015560385003528300499;\\n  uint256 internal constant Z_17 = 19681365563800708744156562671961079617734353445922751560400662591064339349816;\\n  uint256 internal constant Z_18 = 11060693795061987995391612467169498625108376769265861980249917517984263067473;\\n  uint256 internal constant Z_19 = 20136055137568042031318427040358591430196153124171666293804511634641041409480;\\n  uint256 internal constant Z_20 = 10438448879123510479428288344427042332522761183009746406441238260861529360499;\\n  uint256 internal constant Z_21 = 20302411580043873005239406811066876697276902025885155920151067303221158887923;\\n  uint256 internal constant Z_22 = 16905699456770804689394621400052823445587122726651394178036372609288266146575;\\n  uint256 internal constant Z_23 = 13317924909658910751179983108234689413063120680580702936091220805509299490708;\\n  uint256 internal constant Z_24 = 11624463897690689883938167321830091369950933831231839575225419984927228390345;\\n  uint256 internal constant Z_25 = 12388077003631746290497429926117583834311703848735670874049584990731919769551;\\n  uint256 internal constant Z_26 = 16641943593086083573943184041147806885253724243247212515325749241831788827569;\\n  uint256 internal constant Z_27 = 8675770901378242337954792996483564563211065498082968464791979179678744114204;\\n  uint256 internal constant Z_28 = 3741944068643598116715410464277276913339851849923986024648161859457213369743;\\n  uint256 internal constant Z_29 = 9365051374992868354747065577256691008852056444829383197903446097138255771103;\\n  uint256 internal constant Z_30 = 19608043542461863702809013760105552654336523908709289008189330402608282498922;\\n  uint256 internal constant Z_31 = 15116478429455923389320892447700153271977917184085737305957533984219061034768;\\n  uint256 internal constant Z_32 = 13372161856163346716845871420623647679532631520878788090782842562075678687737;\\n\\n  /// @notice Returns the default zero value for a given index\\n  /// @param index The index of the zero value\\n  /// @return The zero value\\n  function _defaultZero(uint8 index) internal pure returns (uint256) {\\n    if (index == 0) return Z_0;\\n    if (index == 1) return Z_1;\\n    if (index == 2) return Z_2;\\n    if (index == 3) return Z_3;\\n    if (index == 4) return Z_4;\\n    if (index == 5) return Z_5;\\n    if (index == 6) return Z_6;\\n    if (index == 7) return Z_7;\\n    if (index == 8) return Z_8;\\n    if (index == 9) return Z_9;\\n    if (index == 10) return Z_10;\\n    if (index == 11) return Z_11;\\n    if (index == 12) return Z_12;\\n    if (index == 13) return Z_13;\\n    if (index == 14) return Z_14;\\n    if (index == 15) return Z_15;\\n    if (index == 16) return Z_16;\\n    if (index == 17) return Z_17;\\n    if (index == 18) return Z_18;\\n    if (index == 19) return Z_19;\\n    if (index == 20) return Z_20;\\n    if (index == 21) return Z_21;\\n    if (index == 22) return Z_22;\\n    if (index == 23) return Z_23;\\n    if (index == 24) return Z_24;\\n    if (index == 25) return Z_25;\\n    if (index == 26) return Z_26;\\n    if (index == 27) return Z_27;\\n    if (index == 28) return Z_28;\\n    if (index == 29) return Z_29;\\n    if (index == 30) return Z_30;\\n    if (index == 31) return Z_31;\\n    if (index == 32) return Z_32;\\n    revert DefaultZeroBadIndex();\\n  }\\n\\n  /// @notice Initializes the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param depth The depth of the tree\\n  function _init(LazyIMTData storage self, uint8 depth) internal {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    self.maxIndex = uint40((1 << depth) - 1);\\n    self.numberOfLeaves = 0;\\n  }\\n\\n  /// @notice Returns the index for a given level and index\\n  /// @param level The level\\n  /// @param index The index\\n  /// @return The index for the element\\n  function _indexForElement(uint8 level, uint40 index) internal pure returns (uint40) {\\n    // store the elements sparsely\\n    return MAX_INDEX * level + index;\\n  }\\n\\n  /// @notice Inserts a leaf into the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param leaf The leaf to insert\\n  function _insert(LazyIMTData storage self, uint256 leaf) internal {\\n    uint40 index = self.numberOfLeaves;\\n\\n    self.numberOfLeaves = index + 1;\\n\\n    uint256 hash = leaf;\\n\\n    for (uint8 i = 0; ; ) {\\n      self.elements[_indexForElement(i, index)] = hash;\\n      // it's a left element so we don't hash until there's a right element\\n      if (index & 1 == 0) break;\\n      uint40 elementIndex = _indexForElement(i, index - 1);\\n      hash = PoseidonT3.poseidon([self.elements[elementIndex], hash]);\\n      unchecked {\\n        index >>= 1;\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @notice Returns the root of the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @return The root of the LazyIMT\\n  function _root(LazyIMTData storage self) internal view returns (uint256) {\\n    // this will always short circuit if self.numberOfLeaves == 0\\n    uint40 numberOfLeaves = self.numberOfLeaves;\\n    // dynamically determine a depth\\n    uint8 depth = 1;\\n    while (uint40(2) ** uint40(depth) < numberOfLeaves) {\\n      depth++;\\n    }\\n    return _root(self, numberOfLeaves, depth);\\n  }\\n\\n  /// @notice Returns the root of the LazyIMT\\n  /// @dev Here it's assumed that the depth value is valid.\\n  /// If it is either 0 or > 2^8-1 this function will panic.\\n  /// @param self The LazyIMTData\\n  /// @param numberOfLeaves The number of leaves\\n  /// @param depth The depth of the tree\\n  /// @return The root of the LazyIMT\\n  function _root(LazyIMTData storage self, uint40 numberOfLeaves, uint8 depth) internal view returns (uint256) {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    // this should always short circuit if self.numberOfLeaves == 0\\n    if (numberOfLeaves == 0) return _defaultZero(depth);\\n    uint256[] memory levels = new uint256[](depth + 1);\\n    _levels(self, numberOfLeaves, depth, levels);\\n    return levels[depth];\\n  }\\n\\n  /// @notice Updates the levels of the LazyIMT\\n  /// @param self The LazyIMTData\\n  /// @param numberOfLeaves The number of leaves\\n  /// @param depth The depth of the tree\\n  /// @param levels The levels of the tree\\n  function _levels(\\n    LazyIMTData storage self,\\n    uint40 numberOfLeaves,\\n    uint8 depth,\\n    uint256[] memory levels\\n  ) internal view {\\n    if (depth > MAX_DEPTH) {\\n      revert DepthTooLarge();\\n    }\\n    if (numberOfLeaves == 0) {\\n      revert NumberOfLeavesCannotBeZero();\\n    }\\n\\n    // this should always short circuit if self.numberOfLeaves == 0\\n    uint40 index = numberOfLeaves - 1;\\n\\n    if (index & 1 == 0) {\\n      levels[0] = self.elements[_indexForElement(0, index)];\\n    } else {\\n      levels[0] = _defaultZero(0);\\n    }\\n\\n    for (uint8 i = 0; i < depth; ) {\\n      if (index & 1 == 0) {\\n        levels[i + 1] = PoseidonT3.poseidon([levels[i], _defaultZero(i)]);\\n      } else {\\n        uint256 levelCount = (numberOfLeaves) >> (i + 1);\\n        if (levelCount > index >> 1) {\\n          uint256 parent = self.elements[_indexForElement(i + 1, index >> 1)];\\n          levels[i + 1] = parent;\\n        } else {\\n          uint256 sibling = self.elements[_indexForElement(i, index - 1)];\\n          levels[i + 1] = PoseidonT3.poseidon([sibling, levels[i]]);\\n        }\\n      }\\n      unchecked {\\n        index >>= 1;\\n        i++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x827938973424c6275d04888463df487f10d9b9ab89198838c45ed4fcad50790b\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @notice voting modes\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message\\n  struct Message {\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0xf2d6000c85f03c81cc4226150c1c1fbd88c9e18c1cc32b7311976ab43552768f\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n  }\\n}\\n\",\"keccak256\":\"0x7b9b48595af59aa1bf0ad4c3b6d87f95a15b45d9b7530a93f6fb0b54bc5641a0\",\"license\":\"MIT\"},\"maci-contracts/contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash4([hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x3b53d8068e07444209114d3c0f9bcf49426921a70cc3e4ae7eeddf6eeb09927a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101608060405234620004d257620043f780380380916200002182856200051a565b833981019061018081830312620004d2578051916001600160a01b0383168303620004d2576020820151926001600160a01b0384168403620004d25760408301516001600160a01b0381168103620004d25760608401516001600160a01b0381168103620004d25760808501516001600160a01b0381168103620004d25760a08601519460ff86168603620004d2578060df88011215620004d2576040519660a088016001600160401b03811189821017620004e85760405287906101608101928311620004d25760c001905b828210620004d757505051916001600160a01b0383168303620004d257602060ff871611620004c057600160ff87161b6000198101908111620002ba576007546001600160501b03191664ffffffffff91821617602881901c8216989160018a01908111620002ba5760281b69ffffffffff00000000001617600755600097967f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba5b64ffffffffff620001a28a8c6200058b565b166000526008806020528160406000205560018a1615620002d05760001964ffffffffff8b16019064ffffffffff8211620002ba576200022d92620001ea6020938e6200058b565b9164ffffffffff604051936200020085620004fe565b166000528352604060002054825282820152604051809381926314d2f97b60e11b8352600483016200055b565b03817386Aad83D18f18cE4F3A96aB08526962BB68F49595af4908115620002ae5760009162000272575b506001647fffffffff60ff929a821c169a0116989762000190565b906020823d602011620002a5575b816200028f602093836200051a565b81010312620002a2575051600162000257565b80fd5b3d915062000280565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b505060ff620002fe918b8960c05260e05261010097885261012094855261014095865280608052166200053e565b60a05260005b60058110620004ad5750506200034860206040516200032381620004fe565b60018152600182820152604051809381926314d2f97b60e11b8352600483016200055b565b03817386Aad83D18f18cE4F3A96aB08526962BB68F49595af4908115620002ae5760009162000475575b5015620004635733156200044a5760098054336001600160a01b0319808316821790935560405195916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360018060a01b031690600a541617600a55613e429384620005b5853960805184610c48015260a05184818161044e0152612a37015260c0518481816119a00152612f7c015260e051848181611eff0152612ff2015251838181610da60152613068015251828181611ebd0152612a850152518181816106c40152612b0a0152f35b604051631e4fbdf760e01b815260006004820152602490fd5b604051633d7ba68560e21b8152600490fd5b906020823d602011620004a4575b8162000492602093836200051a565b81010312620002a25750518562000372565b3d915062000483565b6001906020835193019281550162000304565b604051633e104c7760e01b8152600490fd5b600080fd5b8151815260209182019101620000ee565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117620004e857604052565b601f909101601f19168101906001600160401b03821190821017620004e857604052565b8015620005555760ff8111620002ba576001901b90565b50600190565b6040810192916000915b600283106200057357505050565b60019082518152602080910192019201919062000565565b60ff1663ffffffff0264ffffffffff91828216918203620002ba57821601908111620002ba579056fe608080604052600436101561001357600080fd5b60003560e01c908163055575eb14611eec57508063079410db14611ea75780630dbffbcd14611e7e5780631096c30e14611e27578063122db15314611dff57806313fb893214611dd65780631a8cbcaa14611d805780631b6ef3c514611cf35780632215b3dc14611c7e5780632b78657114611c605780632b7ac3f314611c3757806331e766a514611c125780633364120a14611b5e5780633364c4c8146119cf578063343393b51461198a5780633dfb88b214611933578063423f3e19146118b457806346e47f9a1461184a5780634d5da86b14610f4957806358bfc37914610e325780635bb9399514610e0257806362a361bb14610dd557806362b31f1e14610d9057806364e0ece114610c6c578063652c76e414610c2e578063683f3dc314610c125780636b4575e214610b18578063715018a614610abb57806376db2425146109fc5780637d0a81c8146109bb5780638a2a3dfb146109225780638da5cb5b146108f9578063938419e4146107525780639cfced97146106f3578063aab4a670146106ae578063ac2f00741461067a578063ac98e5df14610638578063b686872014610608578063b87802c8146105df578063bea140b3146104e3578063c8cf9ab2146104a9578063d7a71b9a14610471578063df82635a14610436578063e9affc3a146103ff578063edbfe83f146102a75763f2fde38b1461021957600080fd5b346102a25760203660031901126102a2576102326122ec565b61023a612345565b6001600160a01b0390811690811561028957600954826001600160601b0360a01b821617600955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346102a25760403660031901126102a25736602312156102a2576040516102cd816120ab565b6044813682116102a2576004905b8282106103ef57604051846102ef826120fd565b6040516102fb816120c6565b61014092833683375260405191610311836120ab565b600083526000602080940152826040519261032b846120c6565b823685378051845201518383015260405190610346826120ab565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252838201907f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d82526040519361039d856120fd565b84526103a98385613d4e565b9260405194518590966000915b600a83106103da575050506101a09550519084015251610160830152610180820152f35b81806001928b518152019901920191976103b6565b81358152602091820191016102db565b346102a25760403660031901126102a25736602312156102a257602061042c6104273661218b565b61247a565b6040519015158152f35b346102a25760003660031901126102a25760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346102a25761047f3661232f565b906000526012602052604060002090600052602052602060ff604060002054166040519015158152f35b346102a25760203660031901126102a2576001600160a01b036104ca6122ec565b1660005260116020526020604060002054604051908152f35b346102a25760603660031901126102a25736602312156102a257604051610509816120e2565b6064813682116102a2576004905b8282106105cf5750506040516304b98e1d60e31b8152918290600090600483015b600383106105b5575050506020918173adC3B3F380B3881cDC75DC2359c2100aF56473a95af480156105a957600090610577575b602090604051908152f35b506020813d82116105a1575b816105906020938361216a565b810103126102a2576020905161056c565b3d9150610583565b6040513d6000823e3d90fd5b815181528593506001929092019160209182019101610538565b8135815260209182019101610517565b346102a25760203660031901126102a25760043560058110156102a25760209054604051908152f35b346102a25760003660031901126102a257604060075481519064ffffffffff90818116835260281c166020820152f35b346102a25760003660031901126102a2576080600c5460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b346102a25760203660031901126102a2576004356000526006602052602060018060a01b0360406000205416604051908152f35b346102a25760003660031901126102a2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102a25760a03660031901126102a25736602312156102a25760405161071981612133565b60a4813682116102a2576020926004905b838210610743578461073b8461334c565b604051908152f35b8135815290840190840161072a565b346102a2576102803660031901126102a25761076d36612236565b6001600160401b036044358181116102a25761078d9036906004016122a4565b906064359081116102a2576107a69036906004016122a4565b916102003660831901126102a257604051916107c183612118565b608435835260209260a4358482015260c435604082015260e43560608201523661012312156102a2576040516107f681612090565b80610184913683116102a25786610104915b8483106108e9575050506080830152366101a312156102a2576040519061082e8261214e565b81610284913683116102a2578790915b8383106108d9575050505060a082015261085790612401565b156108c757815160005260128352604060002093838301948551600052845260ff604060002054166108b55761088d9183612a27565b516000526012815260406000209151600052526040600020600160ff19825416179055600080f35b604051632e13e04560e01b8152600490fd5b60405163104646db60e21b8152600490fd5b823581529181019188910161083e565b8235815291810191889101610808565b346102a25760003660031901126102a2576009546040516001600160a01b039091168152602090f35b346102a257366003190161018081126102a257610140136102a257604051610949816120fd565b36602312156102a2576040519061095f826120c6565b81610144923684116102a2576004905b8482106109ab57505081526040366101431901126102a25760209161073b916040519161099b836120ab565b3582526101643584830152613d4e565b813581526020918201910161096f565b346102a25760803660031901126102a257602061073b6040516109dd816120e2565b6109e636612236565b8152604435838201526064356040820152613d12565b346102a2576102003660031901126102a2573660a312156102a257610a20366121c3565b3661012312156102a2576020610a6e91610a39366121fc565b9060018060a01b03600a5416906040518095819482936350de0e5760e01b845260643560443560243560043560048801612389565b03915afa80156105a957602091600091610a8e575b506040519015158152f35b610aae9150823d8111610ab4575b610aa6818361216a565b810190612371565b82610a83565b503d610a9c565b346102a25760003660031901126102a257610ad4612345565b600980546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102a2576101403660031901126102a25760803660231901126102a257604051610b4281612090565b60243560ff811681036102a257815260443560ff811681036102a257602082015260643560ff811681036102a257604082015260843560ff811681036102a257606082015260403660a31901126102a25760405190610ba0826120ab565b60a435825260c4356020830152610bb5612302565b610104356001600160a01b03811681036102a257610124359160028310156102a257606094610be694600435612e7b565b6040805182516001600160a01b0390811682526020808501518216908301529282015190921690820152f35b346102a25760003660031901126102a2576020604051600a8152f35b346102a25760003660031901126102a257602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102a257366003190161010081126102a2576080136102a257604051610c9281612090565b60043560ff811681036102a25781526024359060ff821682036102a257602081019182526044359060ff821682036102a257604081019182526064359260ff841684036102a2576060820193845260403660831901126102a257604051610cf8816120ab565b6084358152602081019160a435835260c4359560018060a01b03958688168098036102a25762ff00009060ff610d2c612302565b97610d35612345565b511663ff00000061ff00600c54965160081b169251945160181b169463ffffffff191617179160101b161717600c5551600d5551600e556001600160601b0360a01b9283600f541617600f5516906010541617601055600080f35b346102a25760003660031901126102a2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102a25760403660031901126102a25736602312156102a257602061073b610dfd3661218b565b613268565b346102a257602061073b610e153661232f565b60405191610e22836120ab565b6040368437825283820152613268565b346102a2576020806003193601126102a257600435906001600160401b0382116102a257366023830112156102a257816004013591610e7083612318565b90610e7e604051928361216a565b8382528282016024819560051b830101913683116102a2576024859101915b838310610f39575050505060405182810180925190949060005b818110610f255785806000610eeb8888610eda818e03601f19810183528261216a565b604051928392839251928391611f2e565b8101039060025afa156105a9577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160005106604051908152f35b825187529585019591850191600101610eb7565b8235815291810191859101610e9d565b346102a25760a03660031901126102a2576004356001600160401b0381116102a257610f799036906004016122bf565b906001600160401b03602435116102a2573660236024350112156102a2576001600160401b0360243560040135116102a25736602480356004013560051b81350101116102a2576044356001600160401b0381116102a257610fdf9036906004016122bf565b9190600260843510156102a257610ff4612345565b600554600f5460105460405192959261106d9290916001600160a01b03908116911661101f83612090565b60ff600c548181168552818160081c166020860152818160101c16604086015260181c166060840152604051611054816120ab565b600d548152600e54602082015260843593606435612e7b565b9260018060a01b03845116600052601160205284604060002055604051956020808801526110bb876110ad604082016024356004013560248035016124c5565b03601f19810189528861216a565b6110c760643542612548565b96604051906110d5826120c6565b8782526110e336848661225e565b602083015260408201526110f836858761225e565b60608201528560808201524260a08201528760c08201526024356004013560e082015261112a60243560040135612318565b611137604051918261216a565b602480356004810135835201602082015b602480356004013560051b813501018210611808575050610100820152604051611171816120fd565b6000815261012082015286600052600b6020526040600020908051825560208101518051906001600160401b0382116115205781906111c0826111b76001880154612555565b600188016125a6565b602090601f83116001146117965760009261178b575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211611520578190611220826112176002880154612555565b600288016125a6565b602090601f83116001146117195760009261170e575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b038211611520578190611280826112776003880154612555565b600388016125a6565b602090601f831160011461169c57600092611691575b50508160011b916000199060031b1c19161760038301555b608081015180516004840180546001600160a01b03199081166001600160a01b039384161790915560208301516005860180548316918416919091179055604090920151600685018054909316911617905560a0810151600783015560c0810151600883015560e0810151600983015561010081015180519068010000000000000000821161152057600a84015482600a860155808310611619575b5060200190600a84016000526020600020916000905b828210611536575050505061012001518051906001600160401b0382116115205761139b82611392600b860154612555565b600b86016125a6565b602090601f8311600114611480579361145393600b8461143a957f7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc69c9b99956114619b99600092611475575b50508160011b916000199060031b1c1916179101555b6040805189516001600160a01b0390811682526020808c0151821690830152998201519099169089015261010060608901526101008801916124a4565b85810360808701526024356004013560248035016124c5565b9184830360a08601526124a4565b934260c083015260e08201528033940390a3005b015190508f806113e7565b90600b840160005260206000209160005b601f1985168110611508575093600b6001857f7532e9985b123ef8bda3bc40b1a4296f34238889a58a41de23df560b8bfb9bc69c9b99956114619b99956114539961143a99601f198116106114ef575b505050811b019101556113fd565b015160001960f88460031b161c191690558f80806114e1565b91926020600181928685015181550194019201611491565b634e487b7160e01b600052604160045260246000fd5b80518051906001600160401b0382116115205761155d826115578854612555565b886125a6565b602090601f83116001146115a957928260019493602093869560009261159e575b5050600019600383901b1c191690841b1787555b01940191019092611360565b01519050388061157e565b908660005260206000209160005b601f1985168110611601575083602093600196938796938794601f198116106115e8575b505050811b018755611592565b015160001960f88460031b161c191690553880806115db565b919260206001819286850151815501940192016115b7565b600a85016000526020600020908382015b818301811061163a57505061134a565b8061164760019254612555565b80611654575b500161162a565b601f8111831461166a5750600081555b8f61164d565b600090828252611688601f60208420920160051c820185830161258f565b81835555611664565b015190508b80611296565b9250600385016000526020600020906000935b601f19841685106116f3576001945083601f198116106116da575b505050811b0160038301556112ae565b015160001960f88460031b161c191690558b80806116ca565b818101518355602094850194600190930192909101906116af565b015190508b80611236565b9250600285016000526020600020906000935b601f1984168510611770576001945083601f19811610611757575b505050811b01600283015561124e565b015160001960f88460031b161c191690558b8080611747565b8181015183556020948501946001909301929091019061172c565b015190508b806111d6565b9250600185016000526020600020906000935b601f19841685106117ed576001945083601f198116106117d4575b505050811b0160018301556111ee565b015160001960f88460031b161c191690558b80806117c4565b818101518355602094850194600190930192909101906117a9565b81356001600160401b0381116102a25760243501366043820112156102a25760209161183f8392369060446024820135910161225e565b815201910190611148565b346102a25760203660031901126102a2576001600160a01b0361186b6122ec565b16806000526011602052604060002054600554111561189c5760005260116020526020604060002054604051908152f35b6024906040519063e64d908d60e01b82526004820152fd5b346102a25760003660031901126102a25764ffffffffff8060075460281c16906001918291825b6118ec575b602061073b84846133ec565b60ff8084169383836118fd87612da9565b16101561192b575083146119155783809301926118db565b634e487b7160e01b600052601160045260246000fd5b9350506118e0565b346102a25760803660031901126102a25736602312156102a25760405161195981612090565b6084813682116102a2576020926004905b83821061197b578461073b846132e4565b8135815290840190840161196a565b346102a25760003660031901126102a2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102a25760403660031901126102a2576004356001600160401b036024358181116102a257611a039036906004016122bf565b9190611a0d612345565b600554841015611b455783600052602091600b8352600b60406000200190841161152057611a4584611a3f8354612555565b836125a6565b6000601f8511600114611ab95791611aa991857f2cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e969594600091611aae575b508560011b906000198760031b1c19161790555b6040519383859485528401916124a4565b0390a2005b905082013588611a84565b601f1985169082600052846000209160005b818110611b2e575091611aa99391877f2cd30b9efd64638f847bef681e87dfbb567e261d02660c8166a92f33729ab33e9897969410611b14575b5050600185811b019055611a98565b830135600019600388901b60f8161c191690558780611b05565b919286600181928689013581550194019201611acb565b60405163a86ecdd560e01b815260048101859052602490fd5b346102a25760803660031901126102a257611b7836612236565b6001600160401b03906044358281116102a257611b999036906004016122a4565b916064359081116102a257611bb29036906004016122a4565b91815160005260126020526040600020926020830193845160005260205260ff604060002054166108b557611be79183612a27565b516000526012602052604060002090516000526020526040600020600160ff19825416179055600080f35b346102a25760003660031901126102a2576040600d54600e5482519182526020820152f35b346102a25760003660031901126102a257600f546040516001600160a01b039091168152602090f35b346102a25760003660031901126102a2576020600554604051908152f35b346102a2576102003660031901126102a257604051611c9c81612118565b60043581526024356020820152604435604082015260643560608201523660a312156102a257611ccb366121c3565b60808201523661012312156102a25761042c602091611ce9366121fc565b60a0820152612401565b346102a25760603660031901126102a25760443580151581036102a257611d1f90602435600435612894565b60405160209182820192808352815180945260408301938160408260051b8601019301916000955b828710611d545785850386f35b909192938280611d70600193603f198a82030186528851611f76565b9601920196019592919092611d47565b346102a25760203660031901126102a257600435600554811015611dbe576000526006602052602060018060a01b0360406000205416604051908152f35b6024906040519063a86ecdd560e01b82526004820152fd5b346102a25760003660031901126102a2576010546040516001600160a01b039091168152602090f35b346102a25760003660031901126102a257602064ffffffffff60075460281c16604051908152f35b346102a25760203660031901126102a257600435611e43612619565b50600554811015611dbe57600052600b602052611e7a611e66604060002061274b565b604051918291602083526020830190611f76565b0390f35b346102a25760003660031901126102a257600a546040516001600160a01b039091168152602090f35b346102a25760003660031901126102a2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102a25760003660031901126102a2577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60005b838110611f415750506000910152565b8181015183820152602001611f31565b90602091611f6a81518092818552858086019101611f2e565b601f01601f1916010190565b919082518152602090611fc0611fae611f9c848701516101808087870152850190611f51565b60408701518482036040860152611f51565b60608601518382036060850152611f51565b60808086015180516001600160a01b03908116928501929092526020810151821660a0850152604001511660c08301529360a081015160e083015260c081015190610100918284015260e08101519161012092838501528101519383870361014085015284518088528188019180808360051b8b01019701926000905b838210612063575050505050612060949550015190610160818403910152611f51565b90565b909192939783806120816001938e601f199082030186528c51611f51565b9a01920192019093929161203d565b608081019081106001600160401b0382111761152057604052565b604081019081106001600160401b0382111761152057604052565b61014081019081106001600160401b0382111761152057604052565b606081019081106001600160401b0382111761152057604052565b602081019081106001600160401b0382111761152057604052565b60c081019081106001600160401b0382111761152057604052565b60a081019081106001600160401b0382111761152057604052565b61010081019081106001600160401b0382111761152057604052565b90601f801991011681019081106001600160401b0382111761152057604052565b9060405191612199836120ab565b8260449182116102a2576004905b8282106121b357505050565b81358152602091820191016121a7565b90604051916121d183612090565b826101049182116102a2576084905b8282106121ec57505050565b81358152602091820191016121e0565b906040519161220a8361214e565b826102049182116102a257610104905b82821061222657505050565b813581526020918201910161221a565b60409060031901126102a2576040519061224f826120ab565b60043582526024356020830152565b9291926001600160401b0382116115205760405191612287601f8201601f19166020018461216a565b8294818452818301116102a2578281602093846000960137010152565b9080601f830112156102a2578160206120609335910161225e565b9181601f840112156102a2578235916001600160401b0383116102a257602083818601950101116102a257565b600435906001600160a01b03821682036102a257565b60e435906001600160a01b03821682036102a257565b6001600160401b0381116115205760051b60200190565b60409060031901126102a2576004359060243590565b6009546001600160a01b0316330361235957565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126102a2575180151581036102a25790565b92969594919390966102008401978452602094858501526040840152606083015260808201836000915b600483106123ea5750505050610100016000905b600882106123d55750505050565b828060019286518152019401910190926123c7565b9080600192855181520193019101909184906123b3565b602060018060a01b03600a54168251908284015160408501519261244c60608701519660a0608082015191015190604051988997889687966350de0e5760e01b885260048801612389565b03915afa9081156105a957600091612462575090565b612060915060203d8111610ab457610aa6818361216a565b60018151149081612495575b5061249057600090565b600190565b60039150602001511438612486565b908060209392818452848401376000828201840152601f01601f1916010190565b90808352602080930192838260051b850194846000925b8584106124ed575050505050505090565b9091929394959681810384528735601e19843603018112156102a25783018681019190356001600160401b0381116102a25780360383136102a257612537889283926001956124a4565b9901940194019295949391906124dc565b9190820180921161191557565b90600182811c92168015612585575b602083101461256f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612564565b81811061259a575050565b6000815560010161258f565b9190601f81116125b557505050565b6125e1926000526020600020906020601f840160051c830193106125e3575b601f0160051c019061258f565b565b90915081906125d4565b9190820391821161191557565b60405190612607826120e2565b60006040838281528260208201520152565b60405190612626826120c6565b8160008152610120606091826020820152826040820152828082015261264a6125fa565b6080820152600060a0820152600060c0820152600060e0820152826101008201520152565b60001981146119155760010190565b80511561268b5760200190565b634e487b7160e01b600052603260045260246000fd5b805182101561268b5760209160051b010190565b90600092918054916126c683612555565b91828252600193848116908160001461272857506001146126e8575b50505050565b90919394506000526020928360002092846000945b8386106127145750505050010190388080806126e2565b8054858701830152940193859082016126fd565b9294505050602093945060ff191683830152151560051b010190388080806126e2565b9060409182519061275b826120c6565b8193815483528051600161277c82612775818488016126b5565b038361216a565b60209182860152825161279d8161279681600289016126b5565b038261216a565b8386015282516127b48161279681600389016126b5565b606086015282516127c4816120e2565b60048501546001600160a01b0390811682526005860154811684830152600686015416848201526080860152600784015460a0860152600884015460c0860152600984015460e0860152600a840180549061281e82612318565b9361282b8651958661216a565b82855260009182528082208186015b8484106128725750505050505061012092612867859361286e93610100600b9801525180968193016126b5565b038461216a565b0152565b858381928a516128868161279681896126b5565b81520192019301929061283a565b600019939284820192909183116119155780830292808404821490151715611915576128c09083612548565b9380850194851161191557849160055495868510156129d4578611156129c2575b6128eb84846125ed565b90600182018092116119155761290082612318565b926040926129108451958661216a565b80855261291f601f1991612318565b0160005b8181106129ab57505083976000965b86811115612944575050505050505050565b80841561298f575b9061298a91600052600b602052612984866000209961297361296d8261266f565b9b61274b565b61297d828b6126a1565b52886126a1565b5061266f565b612932565b5061299a81836125ed565b90838201918211611915579061294c565b6020906129b6612619565b82828901015201612923565b915080850185811161191557916128e1565b505050505090506040516129e7816120fd565b6000815290565b6001600160a01b03909116815260406020820181905261206092910190611f51565b64ffffffffff908116600019019190821161191557565b60075492600064ffffffffff94857f00000000000000000000000000000000000000000000000000000000000000009160281c161015612d9757825193602091612a76838601968751906131c9565b15612d85576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169490853b15612d8157604095838751809263125c7dfb60e11b8252818381612ad360049b338d84016129ee565b03925af18015612d7757612d48575b509380939291612b06958751808098819463b36543a960e01b8352338984016129ee565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa938415612d3c578194612d0d575b50612b5b8551612b49816120e2565b87815285858201524287820152613d12565b9160075491898360281c16936001938486018c8111612cf8579069ffffffffff0000000000869495939260281b169069ffffffffff00000000001916176007559483957386Aad83D18f18cE4F3A96aB08526962BB68F4959935b612c0e575b50505050505050917fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda09391606093612bf88860075460281c16612a10565b93519651978351941684528301524290820152a3565b8c612c1983896133b3565b1685526008808952818b8720558d87841615612cf157612c7c928a928d92612c49612c4388612a10565b8d6133b3565b935193612c55856120ab565b16895283528c8820548252828201528b51809381926314d2f97b60e11b835287830161323a565b0381875af4908115612ce757908594939291879691612cb4575b5085647fffffffff60ff9293821c1698011694969192939496612bb5565b809650898092503d8311612ce0575b612ccd818361216a565b810103126102a257935185949085612c96565b503d612cc3565b8a513d87823e3d90fd5b5050612bba565b601185634e487b7160e01b6000525260246000fd5b9093508281813d8311612d35575b612d25818361216a565b810103126102a257519238612b3a565b503d612d1b565b508451903d90823e3d90fd5b6001600160401b038194929411612d6457865291612b06612ae2565b634e487b7160e01b825260418552602482fd5b87513d86823e3d90fd5b8280fd5b6040516379fae7af60e01b8152600490fd5b60405163b984588b60e01b8152600490fd5b8015612dca5760ff8111611915576001901b9064ffffffffff821161191557565b50600190565b8015612dca57600190602081108216604e8210831617612e315781906005925b808211612e0857505081600019048111611915570290565b90928060001904811161191557818416612e28575b800292811c90612df0565b80920291612e1d565b905060050a90565b908160209103126102a257516001600160a01b03811681036102a25790565b906002821015612e655752565b634e487b7160e01b600052602160045260246000fd5b9391959490612e886125fa565b506005549260018401600555875194602091612ea9838b01978851906131c9565b15612d8557606084019360ff80865116956040809b81850190612ece85835116612dd0565b99612ed881612dd0565b93519a612ee48c6120ab565b8b52898b01938452600019810190811161191557600581101561268b57548e51630278d37760e21b81526004810192909252995160248201529151604483015284518416606483015293870151831660848201529251821660a4840152511660c48201528a5160e48201528751610104820152306101248201526101448101949094526001600160a01b0391600090848661016481857f000000000000000000000000000000000000000000000000000000000000000089165af19586156131bf5782966131a0575b508380808c5193633634487360e01b8552169485600485015216968760248401521695866044830152336064830152612fe96084830189612e58565b858260a48186897f0000000000000000000000000000000000000000000000000000000000000000165af191821561319657908592918492613177575b508b519463431a717560e01b865260048601526024850152866044850152169081606484015233608484015261305f60a4840188612e58565b848360c48184887f0000000000000000000000000000000000000000000000000000000000000000165af192831561316b579361312f937f60ae5b55fbe14a60c1522de273b7cf937d367c8395a811c3c6cc1eaced4700499997938c8460a09b986131399a969461313c575b508a81526006865220856001600160601b038c1b8254161790558c51946130f1866120e2565b855283850152168a830152819b51985199519586528501906040908160018060a01b0391828151168552826020820151166020860152015116910152565b6080830190612e58565ba3565b61315d919450863d8811613164575b613155818361216a565b810190612e39565b92386130cb565b503d61314b565b508951903d90823e3d90fd5b61318f919250873d891161316457613155818361216a565b9038613026565b8b513d85823e3d90fd5b6131b8919650853d871161316457613155818361216a565b9438612fad565b8a513d84823e3d90fd5b907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808080858196099380098180828187620292fc090894620292f80909600108908082811115613227575b50600091613222916125ed565b081590565b9050828101809111611915576000613215565b6040810192916000915b6002831061325157505050565b600190825181526020809101920192019190613244565b602061328891604051809381926314d2f97b60e11b83526004830161323a565b03817386Aad83D18f18cE4F3A96aB08526962BB68F49595af49081156105a9576000916132b3575090565b906020823d82116132dc575b816132cc6020938361216a565b810103126132d957505190565b80fd5b3d91506132bf565b60405163248f667760e01b81529060049060008284015b838210613335575050505060208160848173EF9B7d3b37923C895D92557e1921f5B99703E31A5af49081156105a9576000916132b3575090565b6001908351815260208091019301910190916132fb565b604051630926f44b60e31b815290600090600483015b6005831061339c5750505060208160a481734730Fb77395086C69e6e26b225C3114F071f5ab05af49081156105a9576000916132b3575090565b600190825181526020809101920192019190613362565b60ff1663ffffffff0264ffffffffff91828216918203611915578216019081116119155790565b60ff60019116019060ff821161191557565b919060ff92838216916020908184116137225764ffffffffff918284169182156137115761341a88916133da565b1661345161342782612318565b956040926134378451988961216a565b808852613446601f1991612318565b013685890137612a10565b9060019485808416156000146136dc5750808316948186116119155786956000526008855282600020546134848961267e565b52999592995b6000935b6134a9575b505050505050506134a59293506126a1565b5190565b86849a9998979a16888110156136d157858c881661359857613503916134da8651916134d4836120ab565b8b6126a1565b5181526134e687613734565b828201528551809381926314d2f97b60e11b83526004830161323a565b03817386Aad83D18f18cE4F3A96aB08526962BB68F49595af490811561358d57600091613560575b509986647fffffffff829d8a9b9c9d613550849c866135498c6133da565b16906126a1565b525b821c16950116939a9661348e565b908682813d8311613586575b613576818361216a565b810103126132d95750518661352b565b503d61356c565b84513d6000823e3d90fd5b5082828c6135a5886133da565b161c1690647fffffffff8d891c1680921160001461360057509986647fffffffff829d856135df849c9d9e9f6135da8b6133da565b6133b3565b166000526008895286600020546135fa8d866135498c6133da565b52613552565b61365e915086908461361b8f61361590612a10565b896133b3565b1660005260088252613640866000205491875192613638846120ab565b83528b6126a1565b51828201528551809381926314d2f97b60e11b83526004830161323a565b03817386Aad83D18f18cE4F3A96aB08526962BB68F49595af490811561358d576000916136a4575b509986647fffffffff829d8a9b9c9d6135fa849c866135498c6133da565b908682813d83116136ca575b6136ba818361216a565b810103126132d957505186613686565b503d6136b0565b508697989950613493565b947f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6137078961267e565b529995929961348a565b945050505050612060919250613734565b604051633e104c7760e01b8152600490fd5b60ff168015613ced5760018114613cc85760028114613ca35760038114613c7e5760048114613c595760058114613c345760068114613c0f5760078114613bea5760088114613bc55760098114613ba057600a8114613b7b57600b8114613b5657600c8114613b3157600d8114613b0c57600e8114613ae757600f8114613ac25760108114613a9d5760118114613a785760128114613a535760138114613a2e5760148114613a0957601581146139e457601681146139bf576017811461399a5760188114613975576019811461395057601a811461392b57601b811461390657601c81146138e157601d81146138bc57601e811461389757601f81146138725760201461384e576040516310a2ea0560e21b8152600490fd5b7f1d90601a0c76d2f39824f6dc198fb3b48cbd0231516c8f6208e56ea741c341f990565b507f216b9fa3ac3724cf1ec6caf5a66dd85cae3aee727e00d2a0a59f273df3401f1090565b507f2b59c2651b412c029efa38f835ac1b1b5bdaf89dcb2e4bc9219e7d77c65e776a90565b507f14b46e659dc4072fc64a18d44911c4a303b45f1296c3cb7dec77f269bee9b5df90565b507f0845dd838ca63b2f68775aac8513bd692d26f511698206f3c6ce2b4100dd8d8f90565b507f132e4ff3e4ba890f1610efd4d2f69700b825514d557b82663878a56e2acef41c90565b507f24cb019b59431c232413f66b041923214f7a8a7489caa05b66860f1c3c76d3b190565b507f1b6367322bac9f24889900d310e2feaa0021516fac77470aea078e89335d3fcf90565b507f19b336a1e0a933e2a8f97d97322dcee843a2d9a2401bece52a3a25ddd5bb6bc990565b507f1d71ada9e49baeb4a2cf26be37d3bc680554995ef6706105e93978ba71cacf9490565b507f2560496c1138c827f1efb407d0cdb9d6ec9539b0957dfb67de2776e6026d630f90565b507f2ce2c1fb109ad6574570826774ecfca3e04866bb5a3963962b873646db6641f390565b507f1713f3e3dc5e2393bd31ccc0cdd8601bdee3198cf34d566bb60cfab13e5a087390565b507f2c849a73ab21c9e88e1d711f221863e2a94eb58f3eb42dde575301451f3ec5c890565b507f1874217e8e1dbc51c571a2db1103bf47c3e66a59305ca48bbcee6ad1c8cc575190565b507f2b8342160822355808db759147a7d6f61de451bd5bb88f9db2eb406ea68b813890565b507f199cd1f5b757c285023767abbe9bbb318da4e1fd375b5a001b54a0f3901ea7d390565b507f128fb9ad5b2d8e694bec0888ff95609c15b2a96ae80a34946c953dc503e46fb690565b507f2ec047dd616221873c234f36461080c3e760644bb519ebdb49eb9645215e0edc90565b507f2582b5cdefe032d75373f0ede9171406137e93e7d44405a0b0a409c1c739138090565b507f1f336d6d45d293180c75964e99a7599d44cac2ad447c202c3e1973b0322cf99090565b507f05e0136534f74776d69646bd0bd94519e63af45734405f479382d8400514c1a690565b507f10f7b76489e9c36644736c33c600d1bcedd465fd0aff3027e67b02e13875272d90565b507f1e73f08f6e5e4bb9c2096cc4587526ebfd033c222f4a27e97119c867c36a0d3a90565b507f1ea63a974336db6c0423e719d3f0e11494266237dda3a40de3cb76104436635990565b507f0690bfb582c7502ff6d15d519740ecd73d652b7a14dc82bfd250613ee8e0407690565b507f30553f8216db90854953edd47602897f897104d5b0d65a5ce000981c51da32e090565b507f11dc55d21b17daf8e60253c2a43d519039ba968733cf7c9d5df6155939e1a6d890565b507f08e4b5d410c8de929132c214ea600b5f252fa14aabb97ea67cda5bb4e0ebeec890565b507f04265868d2e705f48d3ae49f7749e67a587dafdb569c1d7334675496046eaad690565b507f2a06fb0b739b402c34dc752d8417b9cd67b7f7cabe4b06b5d995053791fcede490565b507f06928e817d2804a3713efd102bae900c9ab3e8e0b0c6c20f8613bd3b0423a89190565b507f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba90565b612060906040805191613d2483612090565b608036843780515183526020815101516020840152602081015182840152015160608201526132e4565b6020612060926040613df6815194613d6586612133565b60a0368737805151865284815101518587015282815101518387015260608151015160608701526080815101516080870152610120835191613da683612133565b60a036843760a081510151835260c0815101518784015260e081510151858401526101008151015160608401525101516080820152613def835196613dea88612090565b61334c565b865261334c565b83850152815190840152015160608201526132e456fea26469706673582212201eb09be2926f00ac5dd51815a3c104adc3a71dc6d443ddb89b12e6c1290e88d364736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163055575eb14611eec57508063079410db14611ea75780630dbffbcd14611e7e5780631096c30e14611e27578063122db15314611dff57806313fb893214611dd65780631a8cbcaa14611d805780631b6ef3c514611cf35780632215b3dc14611c7e5780632b78657114611c605780632b7ac3f314611c3757806331e766a514611c125780633364120a14611b5e5780633364c4c8146119cf578063343393b51461198a5780633dfb88b214611933578063423f3e19146118b457806346e47f9a1461184a5780634d5da86b14610f4957806358bfc37914610e325780635bb9399514610e0257806362a361bb14610dd557806362b31f1e14610d9057806364e0ece114610c6c578063652c76e414610c2e578063683f3dc314610c125780636b4575e214610b18578063715018a614610abb57806376db2425146109fc5780637d0a81c8146109bb5780638a2a3dfb146109225780638da5cb5b146108f9578063938419e4146107525780639cfced97146106f3578063aab4a670146106ae578063ac2f00741461067a578063ac98e5df14610638578063b686872014610608578063b87802c8146105df578063bea140b3146104e3578063c8cf9ab2146104a9578063d7a71b9a14610471578063df82635a14610436578063e9affc3a146103ff578063edbfe83f146102a75763f2fde38b1461021957600080fd5b346102a25760203660031901126102a2576102326122ec565b61023a612345565b6001600160a01b0390811690811561028957600954826001600160601b0360a01b821617600955167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b346102a25760403660031901126102a25736602312156102a2576040516102cd816120ab565b6044813682116102a2576004905b8282106103ef57604051846102ef826120fd565b6040516102fb816120c6565b61014092833683375260405191610311836120ab565b600083526000602080940152826040519261032b846120c6565b823685378051845201518383015260405190610346826120ab565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78252838201907f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d82526040519361039d856120fd565b84526103a98385613d4e565b9260405194518590966000915b600a83106103da575050506101a09550519084015251610160830152610180820152f35b81806001928b518152019901920191976103b6565b81358152602091820191016102db565b346102a25760403660031901126102a25736602312156102a257602061042c6104273661218b565b61247a565b6040519015158152f35b346102a25760003660031901126102a25760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346102a25761047f3661232f565b906000526012602052604060002090600052602052602060ff604060002054166040519015158152f35b346102a25760203660031901126102a2576001600160a01b036104ca6122ec565b1660005260116020526020604060002054604051908152f35b346102a25760603660031901126102a25736602312156102a257604051610509816120e2565b6064813682116102a2576004905b8282106105cf5750506040516304b98e1d60e31b8152918290600090600483015b600383106105b5575050506020918173__$fa059fb1da6d850ca47ea49359bfe89f78$$1540826e134b1b69b7091c82576ee3aadd$__935b612c0e575b50505050505050917fd3c3cd829e4e37d5baaf10abace26b24e0046e20500c999380410f807edfcda09391606093612bf88860075460281c16612a10565b93519651978351941684528301524290820152a3565b8c612c1983896133b3565b1685526008808952818b8720558d87841615612cf157612c7c928a928d92612c49612c4388612a10565b8d6133b3565b935193612c55856120ab565b16895283528c8820548252828201528b51809381926314d2f97b60e11b835287830161323a565b0381875af4908115612ce757908594939291879691612cb4575b5085647fffffffff60ff9293821c1698011694969192939496612bb5565b809650898092503d8311612ce0575b612ccd818361216a565b810103126102a257935185949085612c96565b503d612cc3565b8a513d87823e3d90fd5b5050612bba565b601185634e487b7160e01b6000525260246000fd5b9093508281813d8311612d35575b612d25818361216a565b810103126102a257519238612b3a565b503d612d1b565b508451903d90823e3d90fd5b6001600160401b038194929411612d6457865291612b06612ae2565b634e487b7160e01b825260418552602482fd5b87513d86823e3d90fd5b8280fd5b6040516379fae7af60e01b8152600490fd5b60405163b984588b60e01b8152600490fd5b8015612dca5760ff8111611915576001901b9064ffffffffff821161191557565b50600190565b8015612dca57600190602081108216604e8210831617612e315781906005925b808211612e0857505081600019048111611915570290565b90928060001904811161191557818416612e28575b800292811c90612df0565b80920291612e1d565b905060050a90565b908160209103126102a257516001600160a01b03811681036102a25790565b906002821015612e655752565b634e487b7160e01b600052602160045260246000fd5b9391959490612e886125fa565b506005549260018401600555875194602091612ea9838b01978851906131c9565b15612d8557606084019360ff80865116956040809b81850190612ece85835116612dd0565b99612ed881612dd0565b93519a612ee48c6120ab565b8b52898b01938452600019810190811161191557600581101561268b57548e51630278d37760e21b81526004810192909252995160248201529151604483015284518416606483015293870151831660848201529251821660a4840152511660c48201528a5160e48201528751610104820152306101248201526101448101949094526001600160a01b0391600090848661016481857f000000000000000000000000000000000000000000000000000000000000000089165af19586156131bf5782966131a0575b508380808c5193633634487360e01b8552169485600485015216968760248401521695866044830152336064830152612fe96084830189612e58565b858260a48186897f0000000000000000000000000000000000000000000000000000000000000000165af191821561319657908592918492613177575b508b519463431a717560e01b865260048601526024850152866044850152169081606484015233608484015261305f60a4840188612e58565b848360c48184887f0000000000000000000000000000000000000000000000000000000000000000165af192831561316b579361312f937f60ae5b55fbe14a60c1522de273b7cf937d367c8395a811c3c6cc1eaced4700499997938c8460a09b986131399a969461313c575b508a81526006865220856001600160601b038c1b8254161790558c51946130f1866120e2565b855283850152168a830152819b51985199519586528501906040908160018060a01b0391828151168552826020820151166020860152015116910152565b6080830190612e58565ba3565b61315d919450863d8811613164575b613155818361216a565b810190612e39565b92386130cb565b503d61314b565b508951903d90823e3d90fd5b61318f919250873d891161316457613155818361216a565b9038613026565b8b513d85823e3d90fd5b6131b8919650853d871161316457613155818361216a565b9438612fad565b8a513d84823e3d90fd5b907f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808080858196099380098180828187620292fc090894620292f80909600108908082811115613227575b50600091613222916125ed565b081590565b9050828101809111611915576000613215565b6040810192916000915b6002831061325157505050565b600190825181526020809101920192019190613244565b602061328891604051809381926314d2f97b60e11b83526004830161323a565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af49081156105a9576000916132b3575090565b906020823d82116132dc575b816132cc6020938361216a565b810103126132d957505190565b80fd5b3d91506132bf565b60405163248f667760e01b81529060049060008284015b838210613335575050505060208160848173__$e61c65d9562aef5fa6ab22c0f787cf1e30$__5af49081156105a9576000916132b3575090565b6001908351815260208091019301910190916132fb565b604051630926f44b60e31b815290600090600483015b6005831061339c5750505060208160a48173__$46fbdf6658faf65265971bdad66851b86c$__5af49081156105a9576000916132b3575090565b600190825181526020809101920192019190613362565b60ff1663ffffffff0264ffffffffff91828216918203611915578216019081116119155790565b60ff60019116019060ff821161191557565b919060ff92838216916020908184116137225764ffffffffff918284169182156137115761341a88916133da565b1661345161342782612318565b956040926134378451988961216a565b808852613446601f1991612318565b013685890137612a10565b9060019485808416156000146136dc5750808316948186116119155786956000526008855282600020546134848961267e565b52999592995b6000935b6134a9575b505050505050506134a59293506126a1565b5190565b86849a9998979a16888110156136d157858c881661359857613503916134da8651916134d4836120ab565b8b6126a1565b5181526134e687613734565b828201528551809381926314d2f97b60e11b83526004830161323a565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af490811561358d57600091613560575b509986647fffffffff829d8a9b9c9d613550849c866135498c6133da565b16906126a1565b525b821c16950116939a9661348e565b908682813d8311613586575b613576818361216a565b810103126132d95750518661352b565b503d61356c565b84513d6000823e3d90fd5b5082828c6135a5886133da565b161c1690647fffffffff8d891c1680921160001461360057509986647fffffffff829d856135df849c9d9e9f6135da8b6133da565b6133b3565b166000526008895286600020546135fa8d866135498c6133da565b52613552565b61365e915086908461361b8f61361590612a10565b896133b3565b1660005260088252613640866000205491875192613638846120ab565b83528b6126a1565b51828201528551809381926314d2f97b60e11b83526004830161323a565b038173__$1540826e134b1b69b7091c82576ee3aadd$__5af490811561358d576000916136a4575b509986647fffffffff829d8a9b9c9d6135fa849c866135498c6133da565b908682813d83116136ca575b6136ba818361216a565b810103126132d957505186613686565b503d6136b0565b508697989950613493565b947f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba6137078961267e565b529995929961348a565b945050505050612060919250613734565b604051633e104c7760e01b8152600490fd5b60ff168015613ced5760018114613cc85760028114613ca35760038114613c7e5760048114613c595760058114613c345760068114613c0f5760078114613bea5760088114613bc55760098114613ba057600a8114613b7b57600b8114613b5657600c8114613b3157600d8114613b0c57600e8114613ae757600f8114613ac25760108114613a9d5760118114613a785760128114613a535760138114613a2e5760148114613a0957601581146139e457601681146139bf576017811461399a5760188114613975576019811461395057601a811461392b57601b811461390657601c81146138e157601d81146138bc57601e811461389757601f81146138725760201461384e576040516310a2ea0560e21b8152600490fd5b7f1d90601a0c76d2f39824f6dc198fb3b48cbd0231516c8f6208e56ea741c341f990565b507f216b9fa3ac3724cf1ec6caf5a66dd85cae3aee727e00d2a0a59f273df3401f1090565b507f2b59c2651b412c029efa38f835ac1b1b5bdaf89dcb2e4bc9219e7d77c65e776a90565b507f14b46e659dc4072fc64a18d44911c4a303b45f1296c3cb7dec77f269bee9b5df90565b507f0845dd838ca63b2f68775aac8513bd692d26f511698206f3c6ce2b4100dd8d8f90565b507f132e4ff3e4ba890f1610efd4d2f69700b825514d557b82663878a56e2acef41c90565b507f24cb019b59431c232413f66b041923214f7a8a7489caa05b66860f1c3c76d3b190565b507f1b6367322bac9f24889900d310e2feaa0021516fac77470aea078e89335d3fcf90565b507f19b336a1e0a933e2a8f97d97322dcee843a2d9a2401bece52a3a25ddd5bb6bc990565b507f1d71ada9e49baeb4a2cf26be37d3bc680554995ef6706105e93978ba71cacf9490565b507f2560496c1138c827f1efb407d0cdb9d6ec9539b0957dfb67de2776e6026d630f90565b507f2ce2c1fb109ad6574570826774ecfca3e04866bb5a3963962b873646db6641f390565b507f1713f3e3dc5e2393bd31ccc0cdd8601bdee3198cf34d566bb60cfab13e5a087390565b507f2c849a73ab21c9e88e1d711f221863e2a94eb58f3eb42dde575301451f3ec5c890565b507f1874217e8e1dbc51c571a2db1103bf47c3e66a59305ca48bbcee6ad1c8cc575190565b507f2b8342160822355808db759147a7d6f61de451bd5bb88f9db2eb406ea68b813890565b507f199cd1f5b757c285023767abbe9bbb318da4e1fd375b5a001b54a0f3901ea7d390565b507f128fb9ad5b2d8e694bec0888ff95609c15b2a96ae80a34946c953dc503e46fb690565b507f2ec047dd616221873c234f36461080c3e760644bb519ebdb49eb9645215e0edc90565b507f2582b5cdefe032d75373f0ede9171406137e93e7d44405a0b0a409c1c739138090565b507f1f336d6d45d293180c75964e99a7599d44cac2ad447c202c3e1973b0322cf99090565b507f05e0136534f74776d69646bd0bd94519e63af45734405f479382d8400514c1a690565b507f10f7b76489e9c36644736c33c600d1bcedd465fd0aff3027e67b02e13875272d90565b507f1e73f08f6e5e4bb9c2096cc4587526ebfd033c222f4a27e97119c867c36a0d3a90565b507f1ea63a974336db6c0423e719d3f0e11494266237dda3a40de3cb76104436635990565b507f0690bfb582c7502ff6d15d519740ecd73d652b7a14dc82bfd250613ee8e0407690565b507f30553f8216db90854953edd47602897f897104d5b0d65a5ce000981c51da32e090565b507f11dc55d21b17daf8e60253c2a43d519039ba968733cf7c9d5df6155939e1a6d890565b507f08e4b5d410c8de929132c214ea600b5f252fa14aabb97ea67cda5bb4e0ebeec890565b507f04265868d2e705f48d3ae49f7749e67a587dafdb569c1d7334675496046eaad690565b507f2a06fb0b739b402c34dc752d8417b9cd67b7f7cabe4b06b5d995053791fcede490565b507f06928e817d2804a3713efd102bae900c9ab3e8e0b0c6c20f8613bd3b0423a89190565b507f0ef71f46e11a513c599eed9dd03576c33439bcfb1cee155316f90541e41649ba90565b612060906040805191613d2483612090565b608036843780515183526020815101516020840152602081015182840152015160608201526132e4565b6020612060926040613df6815194613d6586612133565b60a0368737805151865284815101518587015282815101518387015260608151015160608701526080815101516080870152610120835191613da683612133565b60a036843760a081510151835260c0815101518784015260e081510151858401526101008151015160608401525101516080820152613def835196613dea88612090565b61334c565b865261334c565b83850152815190840152015160608201526132e456fea26469706673582212201eb09be2926f00ac5dd51815a3c104adc3a71dc6d443ddb89b12e6c1290e88d364736f6c63430008140033",
  "libraries": {
    "PoseidonT3": "0x86Aad83D18f18cE4F3A96aB08526962BB68F4959",
    "PoseidonT4": "0xadC3B3F380B3881cDC75DC2359c2100aF56473a9",
    "PoseidonT5": "0xEF9B7d3b37923C895D92557e1921f5B99703E31A",
    "PoseidonT6": "0x4730Fb77395086C69e6e26b225C3114F071f5ab0"
  },
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "How long should the Poll last for",
          "_mode": "Voting mode",
          "_treeDepths": "The depth of the Merkle trees",
          "_verifier": "The Verifier Contract",
          "_vkRegistry": "The VkRegistry Contract"
        },
        "returns": {
          "pollAddr": "a new Poll contract address"
        }
      },
      "getPoll(uint256)": {
        "params": {
          "_pollId": "The identifier of the Poll to retrieve"
        },
        "returns": {
          "poll": "The Poll contract object"
        }
      },
      "getStateTreeRoot()": {
        "returns": {
          "root": "The Merkle root"
        }
      },
      "hash2(uint256[2])": {
        "params": {
          "array": "An array of two uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hash3(uint256[3])": {
        "params": {
          "array": "An array of three uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the three elements."
        }
      },
      "hash4(uint256[4])": {
        "params": {
          "array": "An array of four uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the four elements."
        }
      },
      "hash5(uint256[5])": {
        "params": {
          "array": "An array of five uint256 elements."
        },
        "returns": {
          "result": "The Poseidon hash of the five elements."
        }
      },
      "hashLeftRight(uint256,uint256)": {
        "params": {
          "left": "the first element to hash.",
          "right": "the second element to hash."
        },
        "returns": {
          "result": "The Poseidon hash of the two elements."
        }
      },
      "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": {
        "params": {
          "_encPubKey": "the encryption public key to be hashed",
          "_message": "the message to be hashed"
        },
        "returns": {
          "msgHash": "The hash of the message and the encryption public key"
        }
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "params": {
          "_stateLeaf": "the state leaf to be hashed"
        },
        "returns": {
          "ciphertext": "The hash of the state leaf"
        }
      },
      "numSignUps()": {
        "returns": {
          "signUps": "numsignUps The number of signups"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "padAndHashMessage(uint256[2])": {
        "params": {
          "dataToPad": "the data to be padded"
        },
        "returns": {
          "message": "The padded message",
          "msgHash": "The hash of the padded message and encryption key",
          "padKey": "The padding public key"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sha256Hash(uint256[])": {
        "params": {
          "array": "The array of uint256 elements."
        },
        "returns": {
          "result": "The SHA256 hash of the array."
        }
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "params": {
          "_initialVoiceCreditProxyData": "Data to pass to the     InitialVoiceCreditProxy, which allows it to determine how many voice     credits this user should have.",
          "_pubKey": "The user's desired public key.",
          "_signUpGatekeeperData": "Data to pass to the sign-up gatekeeper's     register() function. For instance, the POAPGatekeeper or     SignUpTokenGatekeeper requires this value to be the ABI-encoded     token ID."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MACI - Minimum Anti-Collusion Infrastructure Version 1",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DefaultZeroBadIndex()": [
        {
          "notice": "Custom errors"
        }
      ],
      "InvalidMessage()": [
        {
          "notice": "custom errors"
        }
      ],
      "PoseidonHashLibrariesNotLinked()": [
        {
          "notice": "custom errors"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "createPoll(string,string[],string,uint256,uint8)": {
        "notice": "Ends of AnonAadhaar integration "
      },
      "deployPoll(uint256,(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,uint8)": {
        "notice": "Deploy a new Poll contract."
      },
      "emptyBallotRoots(uint256)": {
        "notice": "The roots of the empty ballot trees"
      },
      "getPoll(uint256)": {
        "notice": "Get the Poll details"
      },
      "getStateTreeRoot()": {
        "notice": "Return the main root of the StateAq contract"
      },
      "hash2(uint256[2])": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hash3(uint256[3])": {
        "notice": "Computes the Poseidon hash of three uint256 elements."
      },
      "hash4(uint256[4])": {
        "notice": "Computes the Poseidon hash of four uint256 elements."
      },
      "hash5(uint256[5])": {
        "notice": "Computes the Poseidon hash of five uint256 elements."
      },
      "hashLeftRight(uint256,uint256)": {
        "notice": "Computes the Poseidon hash of two uint256 elements."
      },
      "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": {
        "notice": "An utility function used to hash a MACI message and an encryption public key"
      },
      "hashStateLeaf(((uint256,uint256),uint256,uint256))": {
        "notice": "An utility function used to hash a state leaf"
      },
      "initialVoiceCreditProxy()": {
        "notice": "The contract which provides the values of the initial voice credit balance per user"
      },
      "lazyIMTData()": {
        "notice": "The state tree. Represents a mapping between each user's public key and their voice credit balance."
      },
      "messageProcessorFactory()": {
        "notice": "Factory contract that deploy a MessageProcessor contract"
      },
      "nextPollId()": {
        "notice": "Each poll has an incrementing ID"
      },
      "numSignUps()": {
        "notice": "Get the number of signups"
      },
      "padAndHashMessage(uint256[2])": {
        "notice": "An utility function used to pad and hash a MACI message"
      },
      "pollFactory()": {
        "notice": "Factory contract that deploy a Poll contract"
      },
      "polls(uint256)": {
        "notice": "A mapping of poll IDs to Poll contracts."
      },
      "sha256Hash(uint256[])": {
        "notice": "Computes the SHA256 hash of an array of uint256 elements."
      },
      "signUp((uint256,uint256),bytes,bytes)": {
        "notice": "Allows any eligible user sign up. The sign-up gatekeeper should prevent double sign-ups or ineligible users from doing so.  This function will only succeed if the sign-up deadline has not passed. It also enqueues a fresh state leaf into the state AccQueue."
      },
      "signUpGatekeeper()": {
        "notice": "Address of the SignUpGatekeeper, a contract which determines whether a user may sign up to vote"
      },
      "stateTreeDepth()": {
        "notice": "The state tree depth is fixed. As such it should be as large as feasible so that there can be as many users as possible.  i.e. 2 ** 23 = 8388608 this should also match the parameter of the circom circuits.IMPORTANT: remember to change the ballot tree depth in contracts/ts/genEmptyBallotRootsContract.ts file if we change the state tree depth!"
      },
      "tallyFactory()": {
        "notice": "Factory contract that deploy a Tally contract"
      },
      "verifiedAadhaar((uint256,uint256,uint256,uint256,uint256[4],uint256[8]))": {
        "notice": "Begining of AnonAadhaar integration "
      }
    },
    "notice": "A contract which allows users to sign up, and deploy new polls",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1011,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "emptyBallotRoots",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 1014,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "nextPollId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1019,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "polls",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1035,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "lazyIMTData",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(LazyIMTData)3214_storage"
      },
      {
        "astId": 32,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 292,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "anonAadhaarVerifierAddr",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 308,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "_polls",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(PollData)272_storage)"
      },
      {
        "astId": 311,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "treeDepths",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(TreeDepths)4001_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "coordinatorPubKey",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(PubKey)3974_storage"
      },
      {
        "astId": 316,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "verifier",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 318,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "vkRegistry",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 322,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "pollIds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 354,
        "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
        "label": "isPublicKeyRegistered",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(PollData)272_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MACIWrapper.PollData)",
        "numberOfBytes": "32",
        "value": "t_struct(PollData)272_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LazyIMTData)3214_storage": {
        "encoding": "inplace",
        "label": "struct LazyIMTData",
        "members": [
          {
            "astId": 3207,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "maxIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3209,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "numberOfLeaves",
            "offset": 5,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3213,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "elements",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PollContracts)1051_storage": {
        "encoding": "inplace",
        "label": "struct MACI.PollContracts",
        "members": [
          {
            "astId": 1046,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "poll",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1048,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "messageProcessor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1050,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "tally",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PollData)272_storage": {
        "encoding": "inplace",
        "label": "struct MACIWrapper.PollData",
        "members": [
          {
            "astId": 251,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 253,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 255,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "encodedOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 257,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "metadata",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 260,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "pollContracts",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(PollContracts)1051_storage"
          },
          {
            "astId": 262,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 264,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "endTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 266,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "numOfOptions",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 269,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "options",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 271,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "tallyJsonCID",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PubKey)3974_storage": {
        "encoding": "inplace",
        "label": "struct DomainObjs.PubKey",
        "members": [
          {
            "astId": 3971,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3973,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TreeDepths)4001_storage": {
        "encoding": "inplace",
        "label": "struct Params.TreeDepths",
        "members": [
          {
            "astId": 3994,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "intStateTreeDepth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3996,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "messageTreeSubDepth",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3998,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "messageTreeDepth",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4000,
            "contract": "contracts/maci-contracts/MACIWrapper.sol:MACIWrapper",
            "label": "voteOptionTreeDepth",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}